openapi: 3.0.1
info:
  title: Dynamic API Specification
  description: This is a dynamically generated API specification for all endpoints existing on the current project.
  version: 10.13.1
servers:
  - url: host.docker.internal:8055
    description: Your current Directus instance.
paths:
  /assets/{id}:
    get:
      tags:
        - Assets
      operationId: getAsset
      summary: Get an Asset
      description: Image typed files can be dynamically resized and transformed to fit any need.
      parameters:
        - name: id
          in: path
          description: The id of the file.
          required: true
          schema:
            type: string
        - name: key
          in: query
          description: The key of the asset size configured in settings.
          schema:
            type: string
        - name: transforms
          in: query
          description: A JSON array of image transformations
          schema:
            type: string
        - name: download
          in: query
          description: Download the asset to your computer
          schema:
            type: boolean
      responses:
        "200":
          description: Successful request
          content:
            text/plain:
              schema:
                type: string
        "404":
          $ref: "#/components/responses/NotFoundError"
  /auth/login:
    post:
      summary: Retrieve a Temporary Access Token
      description: Retrieve a Temporary Access Token
      tags:
        - Authentication
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: admin@example.com
                  description: Email address of the user you're retrieving the access token for.
                password:
                  type: string
                  description: Password of the user.
                  format: password
                  example: password
                mode:
                  type: string
                  enum:
                    - json
                    - cookie
                    - session
                  default: json
                  description: Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie.
                otp:
                  type: string
                  description: The user's one-time-password (if MFA is enabled).
      responses:
        "200":
          description: Successful authentification
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJI...
                      expires:
                        type: integer
                        example: 900
                      refresh_token:
                        type: string
                        example: yuOJkjdPXMd...
  /auth/refresh:
    post:
      summary: Refresh Token
      description: Refresh a Temporary Access Token.
      tags:
        - Authentication
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJ0eXAiOiJKV...
                  description: JWT access token you want to refresh. This token can't be expired.
                mode:
                  type: string
                  enum:
                    - json
                    - cookie
                    - session
                  default: json
                  description: Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie.
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJI...
                      expires:
                        type: integer
                        example: 900
                      refresh_token:
                        type: string
                        example: Gy-caJMpmGTA...
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /auth/logout:
    post:
      summary: Log Out
      description: Log Out
      tags:
        - Authentication
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJ0eXAiOiJKV...
                  description: The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
                mode:
                  type: string
                  enum:
                    - json
                    - cookie
                    - session
                  description: Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie.
      responses:
        "200":
          description: Request successful
  /auth/password/request:
    post:
      tags:
        - Authentication
      operationId: passwordRequest
      summary: Request a Password Reset
      description: Request a reset password email to be send.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: admin@example.com
                  description: Email address of the user you're requesting a reset for.
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /auth/password/reset:
    post:
      tags:
        - Authentication
      operationId: passwordReset
      summary: Reset a Password
      description: The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  example: eyJ0eXAiOiJKV1Qi...
                  description: One-time use JWT token that is used to verify the user.
                password:
                  type: string
                  example: password
                  format: password
                  description: New password for the user.
      responses:
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /auth/oauth:
    get:
      tags:
        - Authentication
      operationId: oauth
      summary: List OAuth Providers
      description: List configured OAuth providers.
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  public:
                    type: boolean
                  data:
                    type: array
                    example:
                      - github
                      - facebook
                    items:
                      type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /auth/oauth/{provider}:
    get:
      summary: Authenticated using an OAuth provider
      description: Start OAuth flow using the specified provider
      tags:
        - Authentication
      operationId: oauthProvider
      parameters:
        - name: provider
          in: path
          description: Key of the activated OAuth provider.
          required: true
          schema:
            type: string
        - name: redirect
          in: query
          required: false
          description: Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.
          schema:
            type: string
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  public:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /server/info:
    get:
      summary: System Info
      description: Perform a system status check and return the options.
      operationId: serverInfo
      parameters:
        - description: The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.
          in: query
          name: super_admin_token
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                type: object
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Server
  /server/ping:
    get:
      summary: Ping
      description: Ping, pong. Ping.. pong.
      operationId: ping
      responses:
        "200":
          content:
            application/text:
              schema:
                type: string
                pattern: pong
                example: pong
          description: Successful request
      tags:
        - Server
  /folders:
    get:
      summary: List Folders
      description: List the folders.
      operationId: getFolders
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Folders"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Folders
    post:
      summary: Create a Folder
      description: Create a new folder.
      operationId: createFolder
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Amsterdam
                  description: Name of the folder.
                parent:
                  description: Unique identifier of the parent folder. This allows for nested folders.
                  type: integer
              required:
                - name
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Folders"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Folders
    patch:
      summary: Update Multiple Folders
      description: Update multiple folders at the same time.
      tags:
        - Folders
      operationId: updateFolders
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Amsterdam
                      description: Name of the folder.
                    parent:
                      description: Unique identifier of the parent folder. This allows for nested folders.
                      type: integer
                  required:
                    - name
                keys:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Folders"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete Multiple Folders
      description: Delete multiple existing folders.
      tags:
        - Folders
      operationId: deleteFolders
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /folders/{id}:
    get:
      summary: Retrieve a Folder
      description: Retrieve a single folder by unique identifier.
      operationId: getFolder
      parameters:
        - $ref: "#/components/parameters/UUId"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Folders"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Folders
    patch:
      summary: Update a Folder
      description: Update an existing folder
      operationId: updateFolder
      parameters:
        - $ref: "#/components/parameters/UUId"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the folder. Can't be null or empty.
                parent:
                  type: integer
                  example: 3
                  description: Unique identifier of the parent folder. This allows for nested folders.
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Folders"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Folders
    delete:
      summary: Delete a Folder
      description: Delete an existing folder
      operationId: deleteFolder
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Folders
      parameters:
        - $ref: "#/components/parameters/UUId"
  /files:
    get:
      summary: List Files
      description: List the files.
      tags:
        - Files
      operationId: getFiles
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Files"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a File
      description: Create a new file
      tags:
        - Files
      operationId: createFile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Files"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      summary: Update Multiple Files
      description: Update multiple files at the same time.
      tags:
        - Files
      operationId: updateFiles
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    data:
                      type: string
                keys:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Files"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete Multiple Files
      description: Delete multiple existing files.
      tags:
        - Files
      operationId: deleteFiles
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /files/{id}:
    get:
      summary: Retrieve a Files
      description: Retrieve a single file by unique identifier.
      tags:
        - Files
      operationId: getFile
      parameters:
        - $ref: "#/components/parameters/UUId"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Files"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      summary: Update a File
      description: Update an existing file, and/or replace it's file contents.
      tags:
        - Files
      operationId: updateFile
      parameters:
        - $ref: "#/components/parameters/UUId"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          multipart/data:
            schema:
              type: object
              required:
                - file
              properties:
                title:
                  description: Title for the file. Is extracted from the filename on upload, but can be edited by the user.
                  example: User Avatar
                  type: string
                filename_download:
                  description: Preferred filename when file is downloaded.
                  type: string
                description:
                  description: Description for the file.
                  type: string
                  nullable: true
                folder:
                  description: Virtual folder where this file resides in.
                  example: null
                  oneOf:
                    - type: string
                    - $ref: "#/components/schemas/Folders"
                  nullable: true
                tags:
                  description: Tags for the file. Is automatically populated based on Exif data for images.
                  type: array
                  nullable: true
                  items:
                    type: string
                file:
                  description: File contents.
                  format: binary
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: Title for the file. Is extracted from the filename on upload, but can be edited by the user.
                  example: User Avatar
                  type: string
                filename_download:
                  description: Preferred filename when file is downloaded.
                  type: string
                description:
                  description: Description for the file.
                  type: string
                  nullable: true
                folder:
                  description: Virtual folder where this file resides in.
                  example: null
                  oneOf:
                    - type: string
                    - $ref: "#/components/schemas/Folders"
                  nullable: true
                tags:
                  description: Tags for the file. Is automatically populated based on Exif data for images.
                  type: array
                  nullable: true
                  items:
                    type: string
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Files"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete a File
      description: Delete an existing file.
      tags:
        - Files
      operationId: deleteFile
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      parameters:
        - $ref: "#/components/parameters/UUId"
  /collections:
    get:
      summary: List Collections
      description: Returns a list of the collections available in the project.
      operationId: getCollections
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Collections"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Collections
    post:
      summary: Create a Collection
      description: Create a new collection in Directus.
      operationId: createCollection
      parameters:
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - collection
                - fields
              properties:
                collection:
                  type: string
                  description: Unique name of the collection.
                  example: my_collection
                fields:
                  type: array
                  description: The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided.
                  items:
                    type: object
                icon:
                  description: Name of a Google Material Design Icon that's assigned to this collection.
                  type: string
                  example: people
                  nullable: true
                note:
                  description: A note describing the collection.
                  type: string
                  example: null
                  nullable: true
                display_template:
                  description: Text representation of how items from this collection are shown across the system.
                  type: string
                  example: null
                  nullable: true
                hidden:
                  description: Whether or not the collection is hidden from the navigation in the admin app.
                  type: boolean
                  example: false
                singleton:
                  description: Whether or not the collection is treated as a single object.
                  type: boolean
                  example: false
                translation:
                  description: Key value pairs of how to show this collection's name in different languages in the admin app.
                  type: string
                  example: null
                  nullable: true
                versioning:
                  description: Whether or not Content Versioning is enabled for this collection.
                  type: boolean
                  example: false
                archive_field:
                  description: What field holds the archive value.
                  type: string
                  example: null
                  nullable: true
                archive_app_filter:
                  description: What value to use for "archived" items.
                  type: string
                  example: null
                  nullable: true
                archive_value:
                  description: What value to use to "unarchive" items.
                  type: string
                  example: null
                  nullable: true
                unarchive_value:
                  description: Whether or not to show the "archived" filter.
                  type: string
                  example: null
                  nullable: true
                sort_field:
                  description: The sort field in the collection.
                  type: string
                  example: null
                  nullable: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Collections"
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Collections
  /collections/{id}:
    get:
      summary: Retrieve a Collection
      description: Retrieves the details of a single collection.
      operationId: getCollection
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the collection.
          schema:
            type: string
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Collections"
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Collections
    patch:
      summary: Update a Collection
      description: Update an existing collection.
      operationId: updateCollection
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the collection.
          schema:
            type: string
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                meta:
                  description: Metadata of the collection.
                  type: object
                  properties:
                    icon:
                      description: Name of a Google Material Design Icon that's assigned to this collection.
                      type: string
                      example: people
                      nullable: true
                    color:
                      description: Choose the color for the icon assigned to this collection.
                      type: string
                      example: "#6644ff"
                      nullable: true
                    note:
                      description: A note describing the collection.
                      type: string
                      example: null
                      nullable: true
                    display_template:
                      description: Text representation of how items from this collection are shown across the system.
                      type: string
                      example: null
                      nullable: true
                    hidden:
                      description: Whether or not the collection is hidden from the navigation in the admin app.
                      type: boolean
                      example: false
                    singleton:
                      description: Whether or not the collection is treated as a single object.
                      type: boolean
                      example: false
                    translation:
                      description: Key value pairs of how to show this collection's name in different languages in the admin app.
                      type: string
                      example: null
                      nullable: true
                    versioning:
                      description: Whether or not Content Versioning is enabled for this collection.
                      type: boolean
                      example: false
                    archive_field:
                      description: What field holds the archive value.
                      type: string
                      example: null
                      nullable: true
                    archive_app_filter:
                      description: What value to use for "archived" items.
                      type: string
                      example: null
                      nullable: true
                    archive_value:
                      description: What value to use to "unarchive" items.
                      type: string
                      example: null
                      nullable: true
                    unarchive_value:
                      description: Whether or not to show the "archived" filter.
                      type: string
                      example: null
                      nullable: true
                    sort_field:
                      description: The sort field in the collection.
                      type: string
                      example: null
                      nullable: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Collections"
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Collections
    delete:
      summary: Delete a Collection
      description: "Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution."
      operationId: deleteCollection
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the collection.
          schema:
            type: string
  /fields:
    get:
      summary: List All Fields
      description: Returns a list of the fields available in the project.
      operationId: getFields
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Sort"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Fields"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Fields
  /fields/{collection}:
    get:
      summary: List Fields in Collection
      description: Returns a list of the fields available in the given collection.
      operationId: getCollectionFields
      parameters:
        - description: Unique identifier of the collection the item resides in.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/Sort"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Fields"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Fields
    post:
      summary: Create Field in Collection
      description: Create a new field in a given collection.
      operationId: createField
      requestBody:
        content:
          application/json:
            schema:
              required:
                - field
                - datatype
                - type
                - length
              type: object
              properties:
                field:
                  description: Unique name of the field. Field name is unique within the collection.
                  example: id
                  type: string
                type:
                  description: Directus specific data type. Used to cast values in the API.
                  example: integer
                  type: string
                schema:
                  description: The schema info.
                  type: object
                  properties:
                    name:
                      description: The name of the field.
                      example: title
                      type: string
                    table:
                      description: The collection of the field.
                      example: posts
                      type: string
                    type:
                      description: The type of the field.
                      example: string
                      type: string
                    default_value:
                      description: The default value of the field.
                      example: null
                      type: string
                      nullable: true
                    max_length:
                      description: The max length of the field.
                      example: null
                      type: integer
                      nullable: true
                    is_nullable:
                      description: If the field is nullable.
                      example: false
                      type: boolean
                    is_primary_key:
                      description: If the field is primary key.
                      example: false
                      type: boolean
                    has_auto_increment:
                      description: If the field has auto increment.
                      example: false
                      type: boolean
                    foreign_key_column:
                      description: Related column from the foreign key constraint.
                      example: null
                      type: string
                      nullable: true
                    foreign_key_table:
                      description: Related table from the foreign key constraint.
                      example: null
                      type: string
                      nullable: true
                    comment:
                      description: Comment as saved in the database.
                      example: null
                      type: string
                      nullable: true
                    schema:
                      description: Database schema (pg only).
                      example: public
                      type: string
                    foreign_key_schema:
                      description: Related schema from the foreign key constraint (pg only).
                      example: null
                      type: string
                      nullable: true
                meta:
                  description: The meta info.
                  type: object
                  nullable: true
                  properties:
                    id:
                      description: Unique identifier for the field in the `directus_fields` collection.
                      example: 3
                      type: integer
                    collection:
                      description: Unique name of the collection this field is in.
                      example: posts
                      type: string
                    field:
                      description: Unique name of the field. Field name is unique within the collection.
                      example: title
                      type: string
                    special:
                      description: Transformation flag for field
                      example: null
                      type: array
                      items:
                        type: string
                      nullable: true
                    system-interface:
                      description: What interface is used in the admin app to edit the value for this field.
                      example: primary-key
                      type: string
                      nullable: true
                    options:
                      description: Options for the interface that's used. This format is based on the individual interface.
                      example: null
                      type: object
                      nullable: true
                    display:
                      description: What display is used in the admin app to display the value for this field.
                      example: null
                      type: string
                      nullable: true
                    display_options:
                      description: Options for the display that's used. This format is based on the individual display.
                      example: null
                      type: object
                      nullable: true
                    locked:
                      description: If the field can be altered by the end user. Directus system fields have this value set to `true`.
                      example: true
                      type: boolean
                    readonly:
                      description: Prevents the user from editing the value in the field.
                      example: false
                      type: boolean
                    hidden:
                      description: If this field should be hidden.
                      example: true
                      type: boolean
                    sort:
                      description: Sort order of this field on the edit page of the admin app.
                      example: 1
                      type: integer
                      nullable: true
                    width:
                      description: Width of the field on the edit form.
                      example: null
                      type: string
                      nullable: true
                      enum:
                        - half
                        - half-left
                        - half-right
                        - full
                        - fill
                        - null
                    group:
                      description: What field group this field is part of.
                      example: null
                      type: integer
                      nullable: true
                    translation:
                      description: "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app."
                      example: null
                      type: object
                      nullable: true
                    note:
                      description: A user provided note for the field. Will be rendered alongside the interface on the edit page.
                      example: ""
                      type: string
                      nullable: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Fields"
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Fields
      parameters:
        - description: Unique identifier of the collection the item resides in.
          in: path
          name: collection
          required: true
          schema:
            type: string
  /fields/{collection}/{id}:
    get:
      summary: Retrieve a Field
      description: Retrieves the details of a single field in a given collection.
      operationId: getCollectionField
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Fields"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Fields
      parameters:
        - name: collection
          in: path
          description: Unique identifier of the collection the item resides in.
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: Unique identifier of the field.
          schema:
            type: string
          required: true
    patch:
      summary: Update a Field
      description: Update an existing field.
      operationId: updateField
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                field:
                  description: Unique name of the field. Field name is unique within the collection.
                  example: id
                  type: string
                type:
                  description: Directus specific data type. Used to cast values in the API.
                  example: integer
                  type: string
                schema:
                  description: The schema info.
                  type: object
                  properties:
                    name:
                      description: The name of the field.
                      example: title
                      type: string
                    table:
                      description: The collection of the field.
                      example: posts
                      type: string
                    type:
                      description: The type of the field.
                      example: string
                      type: string
                    default_value:
                      description: The default value of the field.
                      example: null
                      type: string
                      nullable: true
                    max_length:
                      description: The max length of the field.
                      example: null
                      type: integer
                      nullable: true
                    is_nullable:
                      description: If the field is nullable.
                      example: false
                      type: boolean
                    is_primary_key:
                      description: If the field is primary key.
                      example: false
                      type: boolean
                    has_auto_increment:
                      description: If the field has auto increment.
                      example: false
                      type: boolean
                    foreign_key_column:
                      description: Related column from the foreign key constraint.
                      example: null
                      type: string
                      nullable: true
                    foreign_key_table:
                      description: Related table from the foreign key constraint.
                      example: null
                      type: string
                      nullable: true
                    comment:
                      description: Comment as saved in the database.
                      example: null
                      type: string
                      nullable: true
                    schema:
                      description: Database schema (pg only).
                      example: public
                      type: string
                    foreign_key_schema:
                      description: Related schema from the foreign key constraint (pg only).
                      example: null
                      type: string
                      nullable: true
                meta:
                  description: The meta info.
                  type: object
                  nullable: true
                  properties:
                    id:
                      description: Unique identifier for the field in the `directus_fields` collection.
                      example: 3
                      type: integer
                    collection:
                      description: Unique name of the collection this field is in.
                      example: posts
                      type: string
                    field:
                      description: Unique name of the field. Field name is unique within the collection.
                      example: title
                      type: string
                    special:
                      description: Transformation flag for field
                      example: null
                      type: array
                      items:
                        type: string
                      nullable: true
                    system-interface:
                      description: What interface is used in the admin app to edit the value for this field.
                      example: primary-key
                      type: string
                      nullable: true
                    options:
                      description: Options for the interface that's used. This format is based on the individual interface.
                      example: null
                      type: object
                      nullable: true
                    display:
                      description: What display is used in the admin app to display the value for this field.
                      example: null
                      type: string
                      nullable: true
                    display_options:
                      description: Options for the display that's used. This format is based on the individual display.
                      example: null
                      type: object
                      nullable: true
                    locked:
                      description: If the field can be altered by the end user. Directus system fields have this value set to `true`.
                      example: true
                      type: boolean
                    readonly:
                      description: Prevents the user from editing the value in the field.
                      example: false
                      type: boolean
                    hidden:
                      description: If this field should be hidden.
                      example: true
                      type: boolean
                    sort:
                      description: Sort order of this field on the edit page of the admin app.
                      example: 1
                      type: integer
                      nullable: true
                    width:
                      description: Width of the field on the edit form.
                      example: null
                      type: string
                      nullable: true
                      enum:
                        - half
                        - half-left
                        - half-right
                        - full
                        - fill
                        - null
                    group:
                      description: What field group this field is part of.
                      example: null
                      type: integer
                      nullable: true
                    translation:
                      description: "Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app."
                      example: null
                      type: object
                      nullable: true
                    note:
                      description: A user provided note for the field. Will be rendered alongside the interface on the edit page.
                      example: ""
                      type: string
                      nullable: true
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Fields"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Fields
      parameters:
        - name: collection
          in: path
          description: Unique identifier of the collection the item resides in.
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: Unique identifier of the field.
          schema:
            type: string
          required: true
    delete:
      summary: Delete a Field
      description: Delete an existing field.
      operationId: deleteField
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Fields
      parameters:
        - name: collection
          in: path
          description: Unique identifier of the collection the item resides in.
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: Unique identifier of the field.
          schema:
            type: string
          required: true
  /users:
    get:
      summary: List Users
      description: List the users.
      operationId: getUsers
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Users"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
    post:
      summary: Create a User
      description: Create a new user.
      operationId: createUser
      parameters:
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
    patch:
      summary: Update Multiple Users
      description: Update multiple users at the same time.
      tags:
        - Users
      operationId: updateUsers
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/Users"
                keys:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Users"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete Multiple Users
      description: Delete multiple existing users.
      tags:
        - Users
      operationId: deleteUsers
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/{id}:
    get:
      summary: Retrieve a User
      description: Retrieve a single user by unique identifier.
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/UUId"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
    patch:
      summary: Update a User
      description: Update an existing user
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/UUId"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                type: object
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
    delete:
      summary: Delete a User
      description: Delete an existing user
      operationId: deleteUser
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UUId"
  /users/invite:
    post:
      summary: Invite User(s)
      description: Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
      operationId: invite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Email address or array of email addresses of the to-be-invited user(s).
                  type: string
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
  /users/invite/accept:
    post:
      summary: Accept User Invite
      description: Accepts and enables an invited user using a JWT invitation token.
      operationId: acceptInvite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJh...KmUk
                  description: Accept invite token.
                password:
                  type: string
                  description: Password of the user.
                  format: password
                  example: d1r3ctu5
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
  /users/me:
    get:
      summary: Retrieve Current User
      description: Retrieve the currently authenticated user.
      operationId: getMe
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
    patch:
      summary: Update Current User
      description: Update the currently authenticated user.
      operationId: updateMe
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Users"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
  /users/me/track/page:
    patch:
      summary: Update Last Page
      description: Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
      operationId: updateLastUsedPageMe
      requestBody:
        content:
          application/json:
            schema:
              properties:
                last_page:
                  description: Path of the page you used last.
                  type: string
              type: object
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
  /users/me/tfa/enable:
    post:
      summary: Enable 2FA
      description: Enables two-factor authentication for the currently authenticated user.
      operationId: meTfaEnable
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
  /users/me/tfa/disable:
    post:
      summary: Disable 2FA
      description: Disables two-factor authentication for the currently authenticated user.
      operationId: meTfaDisable
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      tags:
        - Users
  /items/Event:
    post:
      summary: Create an Item
      description: Create a new Event item.
      tags:
        - Items
        - ItemsEvent
      operationId: createItemsEvent
      parameters:
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/ItemsEvent"
                - $ref: "#/components/schemas/ItemsEvent"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/ItemsEvent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    get:
      summary: List Items
      description: List the Event items.
      tags:
        - Items
        - ItemsEvent
      operationId: readItemsEvent
      security:
        - Auth: []
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/ItemsEvent"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      summary: Update Multiple Items
      description: Update multiple Event items at the same time.
      tags:
        - Items
        - ItemsEvent
      operationId: updateItemsEvent
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/ItemsEvent"
                - $ref: "#/components/schemas/ItemsEvent"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/ItemsEvent"
    delete:
      summary: Delete Multiple Items
      description: Delete multiple existing Event items.
      tags:
        - Items
        - ItemsEvent
      operationId: deleteItemsEvent
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      parameters: []
  /items/Event/{id}:
    get:
      summary: Retrieve an Item
      description: Retrieve a single Event item by unique identifier.
      tags:
        - Items
        - ItemsEvent
      operationId: readSingleItemsEvent
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Version"
        - name: id
          description: Index of the item.
          in: path
          required: true
          schema:
            oneOf:
              - type: integer
                description: Incremental index of the item.
                example: 1
              - type: string
                description: Unique identifier of the item.
                example: 8cbb43fe-4cdf-4991-8352-c461779cec02
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/ItemsEvent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      summary: Update an Item
      description: Update an existing Event item.
      tags:
        - Items
        - ItemsEvent
      operationId: updateSingleItemsEvent
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
        - name: id
          description: Index of the item.
          in: path
          required: true
          schema:
            oneOf:
              - type: integer
                description: Incremental index of the item.
                example: 1
              - type: string
                description: Unique identifier of the item.
                example: 8cbb43fe-4cdf-4991-8352-c461779cec02
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ItemsEvent"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/ItemsEvent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      summary: Delete an Item
      description: Delete an existing Event item.
      tags:
        - Items
        - ItemsEvent
      operationId: deleteSingleItemsEvent
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      parameters:
        - name: id
          description: Index of the item.
          in: path
          required: true
          schema:
            oneOf:
              - type: integer
                description: Incremental index of the item.
                example: 1
              - type: string
                description: Unique identifier of the item.
                example: 8cbb43fe-4cdf-4991-8352-c461779cec02
  /items/Executive:
    post:
      summary: Create an Item
      description: Create a new Executive item.
      tags:
        - Items
        - ItemsExecutive
      operationId: createItemsExecutive
      parameters:
        - $ref: "#/components/parameters/Meta"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/ItemsExecutive"
                - $ref: "#/components/schemas/ItemsExecutive"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/ItemsExecutive"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    get:
      summary: List Items
      description: List the Executive items.
      tags:
        - Items
        - ItemsExecutive
      operationId: readItemsExecutive
      security:
        - Auth: []
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: "#/components/schemas/ItemsExecutive"
                  meta:
                    $ref: "#/components/schemas/x-metadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      summary: Update Multiple Items
      description: Update multiple Executive items at the same time.
      tags:
        - Items
        - ItemsExecutive
      operationId: updateItemsExecutive
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Sort"
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Search"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/ItemsExecutive"
                - $ref: "#/components/schemas/ItemsExecutive"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: "#/components/schemas/ItemsExecutive"
    delete:
      summary: Delete Multiple Items
      description: Delete multiple existing Executive items.
      tags:
        - Items
        - ItemsExecutive
      operationId: deleteItemsExecutive
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      parameters: []
  /items/Executive/{id}:
    get:
      summary: Retrieve an Item
      description: Retrieve a single Executive item by unique identifier.
      tags:
        - Items
        - ItemsExecutive
      operationId: readSingleItemsExecutive
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
        - $ref: "#/components/parameters/Version"
        - name: id
          description: Index of the item.
          in: path
          required: true
          schema:
            oneOf:
              - type: integer
                description: Incremental index of the item.
                example: 1
              - type: string
                description: Unique identifier of the item.
                example: 8cbb43fe-4cdf-4991-8352-c461779cec02
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/ItemsExecutive"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      summary: Update an Item
      description: Update an existing Executive item.
      tags:
        - Items
        - ItemsExecutive
      operationId: updateSingleItemsExecutive
      parameters:
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Meta"
        - name: id
          description: Index of the item.
          in: path
          required: true
          schema:
            oneOf:
              - type: integer
                description: Incremental index of the item.
                example: 1
              - type: string
                description: Unique identifier of the item.
                example: 8cbb43fe-4cdf-4991-8352-c461779cec02
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ItemsExecutive"
      responses:
        "200":
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/ItemsExecutive"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      summary: Delete an Item
      description: Delete an existing Executive item.
      tags:
        - Items
        - ItemsExecutive
      operationId: deleteSingleItemsExecutive
      responses:
        "200":
          description: Successful request
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      parameters:
        - name: id
          description: Index of the item.
          in: path
          required: true
          schema:
            oneOf:
              - type: integer
                description: Incremental index of the item.
                example: 1
              - type: string
                description: Unique identifier of the item.
                example: 8cbb43fe-4cdf-4991-8352-c461779cec02
tags:
  - name: Assets
    description: Image typed files can be dynamically resized and transformed to fit any need.
  - name: Authentication
    description: All data within the platform is private by default. The public role can be configured to expose data without authentication, or you can pass an access token to the API to access private data.
  - name: Server
    description: Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with.
  - name: Folders
    description: Group files by virtual folders.
    x-collection: directus_folders
  - name: Files
    description: Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.
    x-collection: directus_files
  - name: Collections
    description: Collections are the individual collections of items, similar to tables in a database. Changes to collections will alter the schema of the database.
    x-collection: directus_collections
  - name: Fields
    description: Fields are individual pieces of content within an item. They are mapped to columns in the database.
    x-collection: directus_fields
  - name: Users
    description: Users are what gives you access to the data.
    x-collection: directus_users
  - name: ItemsEvent
    x-collection: Event
  - name: ItemsExecutive
    x-collection: Executive
components:
  schemas:
    Query:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
          description: Control what fields are being returned in the object.
          example:
            - "*"
            - "*.*"
        filter:
          type: object
          example:
            <field>:
              <operator>: <value>
        search:
          description: Filter by items that contain the given search query in one of their fields.
          type: string
        sort:
          type: array
          items:
            type: string
          description: How to sort the returned items.
          example:
            - -date_created
        limit:
          type: number
          description: Set the maximum number of items that will be returned
        offset:
          type: number
          description: How many items to skip when fetching data.
        page:
          type: number
          description: Cursor for use in pagination. Often used in combination with limit.
        deep:
          type: object
          description: Deep allows you to set any of the other query parameters on a nested relational dataset.
          example:
            related_articles:
              _limit: 3
    x-metadata:
      type: object
      properties:
        total_count:
          description: Returns the total item count of the collection you're querying.
          type: integer
        filter_count:
          description: Returns the item count of the collection you're querying, taking the current filter/search parameters into account.
          type: integer
    Folders:
      type: object
      properties:
        id:
          description: Unique identifier for the folder.
          example: 0cf0e03d-4364-45df-b77b-ca61f61869d2
          type: string
        name:
          description: Name of the folder.
          example: New York
          type: string
        parent:
          description: Unique identifier of the parent folder. This allows for nested folders.
          example: null
          oneOf:
            - type: string
            - $ref: "#/components/schemas/Folders"
          nullable: true
      x-collection: directus_folders
    Files:
      type: object
      properties:
        id:
          description: Unique identifier for the file.
          example: 8cbb43fe-4cdf-4991-8352-c461779cec02
          type: string
        storage:
          description: Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
          example: local
          type: string
        filename_disk:
          description: Name of the file on disk. By default, Directus uses a random hash for the filename.
          example: a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
          type: string
        filename_download:
          description: How you want to the file to be named when it's being downloaded.
          example: avatar.jpg
          type: string
        title:
          description: Title for the file. Is extracted from the filename on upload, but can be edited by the user.
          example: User Avatar
          type: string
        type:
          description: MIME type of the file.
          example: image/jpeg
          type: string
        folder:
          description: Virtual folder where this file resides in.
          example: null
          oneOf:
            - type: string
            - $ref: "#/components/schemas/Folders"
          nullable: true
        uploaded_by:
          description: Who uploaded the file.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          oneOf:
            - type: string
            - $ref: "#/components/schemas/Users"
        uploaded_on:
          description: When the file was uploaded.
          example: "2019-12-03T00:10:15+00:00"
          type: string
          format: date-time
        modified_by:
          nullable: true
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Users"
        modified_on:
          nullable: false
          type: string
          format: date-time
        charset:
          description: Character set of the file.
          example: binary
          type: string
          nullable: true
        filesize:
          description: Size of the file in bytes.
          example: 137862
          type: integer
        width:
          description: Width of the file in pixels. Only applies to images.
          example: 800
          type: integer
          nullable: true
        height:
          description: Height of the file in pixels. Only applies to images.
          example: 838
          type: integer
          nullable: true
        duration:
          description: Duration of the file in seconds. Only applies to audio and video.
          example: 0
          type: integer
          nullable: true
        embed:
          description: Where the file was embedded from.
          example: null
          type: string
          nullable: true
        description:
          description: Description for the file.
          type: string
          nullable: true
        location:
          description: Where the file was created. Is automatically populated based on Exif data for images.
          type: string
          nullable: true
        tags:
          description: Tags for the file. Is automatically populated based on Exif data for images.
          type: array
          nullable: true
          items:
            type: string
        metadata:
          description: IPTC, Exif, and ICC metadata extracted from file
          type: object
          nullable: true
        focal_point_x:
          nullable: true
          type: integer
        focal_point_y:
          nullable: true
          type: integer
        tus_id:
          nullable: true
          type: string
        tus_data:
          nullable: true
      x-collection: directus_files
    Collections:
      type: object
      properties:
        collection:
          description: The collection key.
          example: customers
          type: string
        icon:
          nullable: true
          type: string
        note:
          nullable: true
          type: string
        display_template:
          nullable: true
          type: string
        hidden:
          nullable: false
          type: boolean
        singleton:
          nullable: false
          type: boolean
        translations:
          nullable: true
        archive_field:
          nullable: true
          type: string
        archive_app_filter:
          nullable: false
          type: boolean
        archive_value:
          nullable: true
          type: string
        unarchive_value:
          nullable: true
          type: string
        sort_field:
          nullable: true
          type: string
        accountability:
          nullable: true
          type: string
        color:
          nullable: true
          type: string
        item_duplication_fields:
          nullable: true
        sort:
          nullable: true
          type: integer
        group:
          nullable: true
          oneOf:
            - type: string
            - $ref: "#/components/schemas/Collections"
        collapse:
          nullable: false
          type: string
        preview_url:
          nullable: true
          type: string
        versioning:
          nullable: false
          type: boolean
      x-collection: directus_collections
    Fields:
      type: object
      properties:
        id:
          nullable: false
          type: integer
        collection:
          description: Unique name of the collection this field is in.
          example: about_us
          type: string
        field:
          description: Unique name of the field. Field name is unique within the collection.
          example: id
          type: string
        special:
          nullable: true
          type: array
          items:
            type: string
        interface:
          nullable: true
          type: string
        options:
          nullable: true
        display:
          nullable: true
          type: string
        display_options:
          nullable: true
        readonly:
          nullable: false
          type: boolean
        hidden:
          nullable: false
          type: boolean
        sort:
          nullable: true
          type: integer
        width:
          nullable: true
          type: string
        translations:
          nullable: true
        note:
          nullable: true
          type: string
        conditions:
          nullable: true
        required:
          nullable: true
          type: boolean
        group:
          nullable: true
          oneOf:
            - type: integer
            - $ref: "#/components/schemas/Fields"
        validation:
          nullable: true
        validation_message:
          nullable: true
          type: string
      x-collection: directus_fields
    Users:
      type: object
      properties:
        id:
          description: Unique identifier for the user.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          type: string
        first_name:
          description: First name of the user.
          example: Admin
          type: string
        last_name:
          description: Last name of the user.
          example: User
          type: string
        email:
          description: Unique email address for the user.
          example: admin@example.com
          type: string
          format: email
        password:
          description: Password of the user.
          type: string
        location:
          description: The user's location.
          example: null
          type: string
          nullable: true
        title:
          description: The user's title.
          example: null
          type: string
          nullable: true
        description:
          description: The user's description.
          example: null
          type: string
          nullable: true
        tags:
          description: The user's tags.
          example: null
          type: array
          nullable: true
          items:
            type: string
        avatar:
          description: The user's avatar.
          example: null
          oneOf:
            - type: string
            - $ref: "#/components/schemas/Files"
          nullable: true
        language:
          description: The user's language used in Directus.
          example: en-US
          type: string
        tfa_secret:
          description: The 2FA secret string that's used to generate one time passwords.
          example: null
          type: string
          nullable: true
        status:
          description: Status of the user.
          example: active
          type: string
          enum:
            - active
            - invited
            - draft
            - suspended
            - deleted
        role:
          description: Unique identifier of the role of this user.
          example: 2f24211d-d928-469a-aea3-3c8f53d4e426
          oneOf:
            - type: string
            - $ref: "#/components/schemas/Roles"
        token:
          description: Static token for the user.
          type: string
          nullable: true
        last_access:
          description: When this user used the API last.
          example: "2020-05-31T14:32:37Z"
          type: string
          nullable: true
          format: date-time
        last_page:
          description: Last page that the user was on.
          example: /my-project/settings/collections/a
          type: string
          nullable: true
        provider:
          nullable: false
          type: string
        external_identifier:
          nullable: true
          type: string
        auth_data:
          nullable: true
        email_notifications:
          nullable: true
          type: boolean
        appearance:
          nullable: true
          type: string
        theme_dark:
          nullable: true
          type: string
        theme_light:
          nullable: true
          type: string
        theme_light_overrides:
          nullable: true
        theme_dark_overrides:
          nullable: true
      x-collection: directus_users
    ItemsEvent:
      type: object
      properties:
        id:
          nullable: false
          type: integer
        status:
          nullable: false
          type: string
        user_created:
          nullable: true
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Users"
        date_created:
          nullable: true
          type: string
          format: timestamp
        user_updated:
          nullable: true
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Users"
        date_updated:
          nullable: true
          type: string
          format: timestamp
        name:
          nullable: true
          type: string
        datetime:
          nullable: true
          type: string
          format: date-time
        price:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        note:
          nullable: true
          type: string
        image:
          nullable: true
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Files"
        venue:
          nullable: true
      x-collection: Event
    ItemsExecutive:
      type: object
      properties:
        id:
          nullable: false
          type: integer
        status:
          nullable: false
          type: string
        user_created:
          nullable: true
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Users"
        date_created:
          nullable: true
          type: string
          format: timestamp
        user_updated:
          nullable: true
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Users"
        date_updated:
          nullable: true
          type: string
          format: timestamp
        name:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        title:
          nullable: true
          type: string
        image:
          nullable: true
          oneOf:
            - type: string
              format: uuid
            - $ref: "#/components/schemas/Files"
      x-collection: Executive
  parameters:
    Id:
      description: Index
      name: id
      in: path
      required: true
      schema:
        type: integer
    UUId:
      description: Unique identifier for the object.
      name: id
      in: path
      required: true
      schema:
        example: 8cbb43fe-4cdf-4991-8352-c461779cec02
        type: string
    Collection:
      description: Collection of which you want to retrieve the items from.
      name: collection
      in: path
      required: true
      schema:
        type: string
    Search:
      description: Filter by items that contain the given search query in one of their fields.
      in: query
      name: search
      required: false
      schema:
        type: string
    Page:
      description: Cursor for use in pagination. Often used in combination with limit.
      in: query
      name: page
      required: false
      schema:
        type: integer
    Offset:
      description: How many items to skip when fetching data.
      in: query
      name: offset
      required: false
      schema:
        type: integer
    Sort:
      description: |
        How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
      in: query
      name: sort
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    Meta:
      description: What metadata to return in the response.
      in: query
      name: meta
      required: false
      schema:
        type: string
    Limit:
      description: A limit on the number of objects that are returned.
      in: query
      name: limit
      required: false
      schema:
        type: integer
    Filter:
      description: Select items in collection by given conditions.
      in: query
      name: filter
      required: false
      content:
        application/json:
          schema:
            type: object
            example:
              <field>:
                <operator>: <value>
    Fields:
      description: Control what fields are being returned in the object.
      in: query
      name: fields
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    Export:
      name: export
      description: Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml".
      in: query
      required: false
      schema:
        type: string
        enum:
          - csv
          - json
          - xml
          - yaml
    Version:
      name: version
      description: |
        Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
      in: query
      required: false
      schema:
        type: string
  responses:
    NotFoundError:
      description: "Error: Not found."
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                  message:
                    type: string
    UnauthorizedError:
      description: "Error: Unauthorized request"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                  message:
                    type: string
  securitySchemes:
    KeyAuth:
      type: apiKey
      in: query
      name: access_token
    Auth:
      type: apiKey
      in: header
      name: Authorization
