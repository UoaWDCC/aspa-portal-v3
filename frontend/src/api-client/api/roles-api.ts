/* tslint:disable */
/* eslint-disable */
/**
 * Dynamic API Specification
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 10.13.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { CreateRole200Response } from "../models";
// @ts-ignore
import type { CreateRoleRequest } from "../models";
// @ts-ignore
import type { GetAsset404Response } from "../models";
// @ts-ignore
import type { GetRoles200Response } from "../models";
// @ts-ignore
import type { UpdateRoleRequest } from "../models";
// @ts-ignore
import type { UpdateRolesRequest } from "../models";
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Create a new role.
     * @summary Create a Role
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {CreateRoleRequest} [createRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole: async (
      fields?: Array<string>,
      meta?: string,
      createRoleRequest?: CreateRoleRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRoleRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an existing role
     * @summary Delete a Role
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteRole", "id", id);
      const localVarPath = `/roles/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete multiple existing roles.
     * @summary Delete Multiple Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoles: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve a single role by unique identifier.
     * @summary Retrieve a Role
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole: async (
      id: string,
      fields?: Array<string>,
      meta?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getRole", "id", id);
      const localVarPath = `/roles/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List the roles.
     * @summary List Roles
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {number} [page] Cursor for use in pagination. Often used in combination with limit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles: async (
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      meta?: string,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update an existing role
     * @summary Update a Role
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {UpdateRoleRequest} [updateRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRole: async (
      id: string,
      fields?: Array<string>,
      meta?: string,
      updateRoleRequest?: UpdateRoleRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateRole", "id", id);
      const localVarPath = `/roles/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRoleRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update multiple roles at the same time.
     * @summary Update Multiple Roles
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateRolesRequest} [updateRolesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoles: async (
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateRolesRequest?: UpdateRolesRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRolesRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new role.
     * @summary Create a Role
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {CreateRoleRequest} [createRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRole(
      fields?: Array<string>,
      meta?: string,
      createRoleRequest?: CreateRoleRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateRole200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(
        fields,
        meta,
        createRoleRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RolesApi.createRole"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an existing role
     * @summary Delete a Role
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRole(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RolesApi.deleteRole"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete multiple existing roles.
     * @summary Delete Multiple Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRoles(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteRoles(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RolesApi.deleteRoles"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve a single role by unique identifier.
     * @summary Retrieve a Role
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRole(
      id: string,
      fields?: Array<string>,
      meta?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateRole200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(
        id,
        fields,
        meta,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RolesApi.getRole"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List the roles.
     * @summary List Roles
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {number} [page] Cursor for use in pagination. Often used in combination with limit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoles(
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      meta?: string,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetRoles200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(
        fields,
        limit,
        offset,
        meta,
        sort,
        filter,
        search,
        page,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RolesApi.getRoles"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update an existing role
     * @summary Update a Role
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {UpdateRoleRequest} [updateRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRole(
      id: string,
      fields?: Array<string>,
      meta?: string,
      updateRoleRequest?: UpdateRoleRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateRole200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(
        id,
        fields,
        meta,
        updateRoleRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RolesApi.updateRole"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update multiple roles at the same time.
     * @summary Update Multiple Roles
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateRolesRequest} [updateRolesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRoles(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateRolesRequest?: UpdateRolesRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetRoles200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoles(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        updateRolesRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["RolesApi.updateRoles"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RolesApiFp(configuration);
  return {
    /**
     * Create a new role.
     * @summary Create a Role
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {CreateRoleRequest} [createRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(
      fields?: Array<string>,
      meta?: string,
      createRoleRequest?: CreateRoleRequest,
      options?: any,
    ): AxiosPromise<CreateRole200Response> {
      return localVarFp
        .createRole(fields, meta, createRoleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete an existing role
     * @summary Delete a Role
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteRole(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete multiple existing roles.
     * @summary Delete Multiple Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoles(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteRoles(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve a single role by unique identifier.
     * @summary Retrieve a Role
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole(
      id: string,
      fields?: Array<string>,
      meta?: string,
      options?: any,
    ): AxiosPromise<CreateRole200Response> {
      return localVarFp
        .getRole(id, fields, meta, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List the roles.
     * @summary List Roles
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {number} [page] Cursor for use in pagination. Often used in combination with limit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      meta?: string,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      page?: number,
      options?: any,
    ): AxiosPromise<GetRoles200Response> {
      return localVarFp
        .getRoles(
          fields,
          limit,
          offset,
          meta,
          sort,
          filter,
          search,
          page,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Update an existing role
     * @summary Update a Role
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {UpdateRoleRequest} [updateRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRole(
      id: string,
      fields?: Array<string>,
      meta?: string,
      updateRoleRequest?: UpdateRoleRequest,
      options?: any,
    ): AxiosPromise<CreateRole200Response> {
      return localVarFp
        .updateRole(id, fields, meta, updateRoleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update multiple roles at the same time.
     * @summary Update Multiple Roles
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateRolesRequest} [updateRolesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoles(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateRolesRequest?: UpdateRolesRequest,
      options?: any,
    ): AxiosPromise<GetRoles200Response> {
      return localVarFp
        .updateRoles(
          fields,
          limit,
          meta,
          offset,
          sort,
          filter,
          search,
          updateRolesRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
  /**
   * Create a new role.
   * @summary Create a Role
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {CreateRoleRequest} [createRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public createRole(
    fields?: Array<string>,
    meta?: string,
    createRoleRequest?: CreateRoleRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .createRole(fields, meta, createRoleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete an existing role
   * @summary Delete a Role
   * @param {string} id Unique identifier for the object.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public deleteRole(id: string, options?: RawAxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .deleteRole(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete multiple existing roles.
   * @summary Delete Multiple Roles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public deleteRoles(options?: RawAxiosRequestConfig) {
    return RolesApiFp(this.configuration)
      .deleteRoles(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve a single role by unique identifier.
   * @summary Retrieve a Role
   * @param {string} id Unique identifier for the object.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public getRole(
    id: string,
    fields?: Array<string>,
    meta?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .getRole(id, fields, meta, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List the roles.
   * @summary List Roles
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {string} [meta] What metadata to return in the response.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {number} [page] Cursor for use in pagination. Often used in combination with limit.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public getRoles(
    fields?: Array<string>,
    limit?: number,
    offset?: number,
    meta?: string,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    page?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .getRoles(
        fields,
        limit,
        offset,
        meta,
        sort,
        filter,
        search,
        page,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update an existing role
   * @summary Update a Role
   * @param {string} id Unique identifier for the object.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {UpdateRoleRequest} [updateRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public updateRole(
    id: string,
    fields?: Array<string>,
    meta?: string,
    updateRoleRequest?: UpdateRoleRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .updateRole(id, fields, meta, updateRoleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update multiple roles at the same time.
   * @summary Update Multiple Roles
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {string} [meta] What metadata to return in the response.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {UpdateRolesRequest} [updateRolesRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public updateRoles(
    fields?: Array<string>,
    limit?: number,
    meta?: string,
    offset?: number,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    updateRolesRequest?: UpdateRolesRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return RolesApiFp(this.configuration)
      .updateRoles(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        updateRolesRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
