/* tslint:disable */
/* eslint-disable */
/**
 * Dynamic API Specification
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 10.13.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateCollection200Response } from '../models';
// @ts-ignore
import type { CreateCollectionRequest } from '../models';
// @ts-ignore
import type { GetAsset404Response } from '../models';
// @ts-ignore
import type { GetCollections200Response } from '../models';
// @ts-ignore
import type { UpdateCollectionRequest } from '../models';
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export const CollectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new collection in Directus.
         * @summary Create a Collection
         * @param {string} [meta] What metadata to return in the response.
         * @param {CreateCollectionRequest} [createCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: async (meta?: string, createCollectionRequest?: CreateCollectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (meta !== undefined) {
                localVarQueryParameter['meta'] = meta;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
         * @summary Delete a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCollection', 'id', id)
            const localVarPath = `/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of a single collection.
         * @summary Retrieve a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {string} [meta] What metadata to return in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection: async (id: string, meta?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCollection', 'id', id)
            const localVarPath = `/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (meta !== undefined) {
                localVarQueryParameter['meta'] = meta;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the collections available in the project.
         * @summary List Collections
         * @param {number} [offset] How many items to skip when fetching data.
         * @param {string} [meta] What metadata to return in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollections: async (offset?: number, meta?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (meta !== undefined) {
                localVarQueryParameter['meta'] = meta;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing collection.
         * @summary Update a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {string} [meta] What metadata to return in the response.
         * @param {UpdateCollectionRequest} [updateCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollection: async (id: string, meta?: string, updateCollectionRequest?: UpdateCollectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCollection', 'id', id)
            const localVarPath = `/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (meta !== undefined) {
                localVarQueryParameter['meta'] = meta;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionsApi - functional programming interface
 * @export
 */
export const CollectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CollectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new collection in Directus.
         * @summary Create a Collection
         * @param {string} [meta] What metadata to return in the response.
         * @param {CreateCollectionRequest} [createCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCollection(meta?: string, createCollectionRequest?: CreateCollectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCollection(meta, createCollectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionsApi.createCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
         * @summary Delete a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollection(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCollection(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionsApi.deleteCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the details of a single collection.
         * @summary Retrieve a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {string} [meta] What metadata to return in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollection(id: string, meta?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollection(id, meta, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionsApi.getCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of the collections available in the project.
         * @summary List Collections
         * @param {number} [offset] How many items to skip when fetching data.
         * @param {string} [meta] What metadata to return in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollections(offset?: number, meta?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCollections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollections(offset, meta, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionsApi.getCollections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing collection.
         * @summary Update a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {string} [meta] What metadata to return in the response.
         * @param {UpdateCollectionRequest} [updateCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollection(id: string, meta?: string, updateCollectionRequest?: UpdateCollectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollection(id, meta, updateCollectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CollectionsApi.updateCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CollectionsApi - factory interface
 * @export
 */
export const CollectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CollectionsApiFp(configuration)
    return {
        /**
         * Create a new collection in Directus.
         * @summary Create a Collection
         * @param {string} [meta] What metadata to return in the response.
         * @param {CreateCollectionRequest} [createCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection(meta?: string, createCollectionRequest?: CreateCollectionRequest, options?: any): AxiosPromise<CreateCollection200Response> {
            return localVarFp.createCollection(meta, createCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
         * @summary Delete a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCollection(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of a single collection.
         * @summary Retrieve a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {string} [meta] What metadata to return in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollection(id: string, meta?: string, options?: any): AxiosPromise<CreateCollection200Response> {
            return localVarFp.getCollection(id, meta, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the collections available in the project.
         * @summary List Collections
         * @param {number} [offset] How many items to skip when fetching data.
         * @param {string} [meta] What metadata to return in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollections(offset?: number, meta?: string, options?: any): AxiosPromise<GetCollections200Response> {
            return localVarFp.getCollections(offset, meta, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing collection.
         * @summary Update a Collection
         * @param {string} id Unique identifier of the collection.
         * @param {string} [meta] What metadata to return in the response.
         * @param {UpdateCollectionRequest} [updateCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollection(id: string, meta?: string, updateCollectionRequest?: UpdateCollectionRequest, options?: any): AxiosPromise<CreateCollection200Response> {
            return localVarFp.updateCollection(id, meta, updateCollectionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export class CollectionsApi extends BaseAPI {
    /**
     * Create a new collection in Directus.
     * @summary Create a Collection
     * @param {string} [meta] What metadata to return in the response.
     * @param {CreateCollectionRequest} [createCollectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public createCollection(meta?: string, createCollectionRequest?: CreateCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionsApiFp(this.configuration).createCollection(meta, createCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.
     * @summary Delete a Collection
     * @param {string} id Unique identifier of the collection.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public deleteCollection(id: string, options?: RawAxiosRequestConfig) {
        return CollectionsApiFp(this.configuration).deleteCollection(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of a single collection.
     * @summary Retrieve a Collection
     * @param {string} id Unique identifier of the collection.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public getCollection(id: string, meta?: string, options?: RawAxiosRequestConfig) {
        return CollectionsApiFp(this.configuration).getCollection(id, meta, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the collections available in the project.
     * @summary List Collections
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public getCollections(offset?: number, meta?: string, options?: RawAxiosRequestConfig) {
        return CollectionsApiFp(this.configuration).getCollections(offset, meta, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing collection.
     * @summary Update a Collection
     * @param {string} id Unique identifier of the collection.
     * @param {string} [meta] What metadata to return in the response.
     * @param {UpdateCollectionRequest} [updateCollectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public updateCollection(id: string, meta?: string, updateCollectionRequest?: UpdateCollectionRequest, options?: RawAxiosRequestConfig) {
        return CollectionsApiFp(this.configuration).updateCollection(id, meta, updateCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

