/* tslint:disable */
/* eslint-disable */
/**
 * Dynamic API Specification
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 10.13.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { AcceptInviteRequest } from "../models";
// @ts-ignore
import type { CreateUser200Response } from "../models";
// @ts-ignore
import type { GetAsset404Response } from "../models";
// @ts-ignore
import type { GetUsers200Response } from "../models";
// @ts-ignore
import type { InviteRequest } from "../models";
// @ts-ignore
import type { ServerInfo200Response } from "../models";
// @ts-ignore
import type { UpdateLastUsedPageMeRequest } from "../models";
// @ts-ignore
import type { UpdateUsersRequest } from "../models";
// @ts-ignore
import type { Users } from "../models";
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Accepts and enables an invited user using a JWT invitation token.
     * @summary Accept User Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvite: async (
      acceptInviteRequest: AcceptInviteRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'acceptInviteRequest' is not null or undefined
      assertParamExists(
        "acceptInvite",
        "acceptInviteRequest",
        acceptInviteRequest,
      );
      const localVarPath = `/users/invite/accept`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        acceptInviteRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a new user.
     * @summary Create a User
     * @param {string} [meta] What metadata to return in the response.
     * @param {Users} [users]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      meta?: string,
      users?: Users,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        users,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an existing user
     * @summary Delete a User
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteUser", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete multiple existing users.
     * @summary Delete Multiple Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve the currently authenticated user.
     * @summary Retrieve Current User
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: async (
      fields?: Array<string>,
      meta?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve a single user by unique identifier.
     * @summary Retrieve a User
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      id: string,
      fields?: Array<string>,
      meta?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUser", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List the users.
     * @summary List Users
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      meta?: string,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
     * @summary Invite User(s)
     * @param {InviteRequest} [inviteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invite: async (
      inviteRequest?: InviteRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/invite`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inviteRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Disables two-factor authentication for the currently authenticated user.
     * @summary Disable 2FA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meTfaDisable: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tfa/disable`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Enables two-factor authentication for the currently authenticated user.
     * @summary Enable 2FA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meTfaEnable: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/tfa/enable`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
     * @summary Update Last Page
     * @param {UpdateLastUsedPageMeRequest} [updateLastUsedPageMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLastUsedPageMe: async (
      updateLastUsedPageMeRequest?: UpdateLastUsedPageMeRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me/track/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateLastUsedPageMeRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update the currently authenticated user.
     * @summary Update Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMe: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update an existing user
     * @summary Update a User
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Users} [users]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      id: string,
      fields?: Array<string>,
      meta?: string,
      users?: Users,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateUser", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        users,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update multiple users at the same time.
     * @summary Update Multiple Users
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateUsersRequest} [updateUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers: async (
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateUsersRequest?: UpdateUsersRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUsersRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     * Accepts and enables an invited user using a JWT invitation token.
     * @summary Accept User Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async acceptInvite(
      acceptInviteRequest: AcceptInviteRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUser200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.acceptInvite(
        acceptInviteRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.acceptInvite"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Create a new user.
     * @summary Create a User
     * @param {string} [meta] What metadata to return in the response.
     * @param {Users} [users]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      meta?: string,
      users?: Users,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUser200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        meta,
        users,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.createUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an existing user
     * @summary Delete a User
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.deleteUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete multiple existing users.
     * @summary Delete Multiple Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUsers(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUsers(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.deleteUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve the currently authenticated user.
     * @summary Retrieve Current User
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMe(
      fields?: Array<string>,
      meta?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUser200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(
        fields,
        meta,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getMe"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve a single user by unique identifier.
     * @summary Retrieve a User
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      id: string,
      fields?: Array<string>,
      meta?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUser200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        id,
        fields,
        meta,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List the users.
     * @summary List Users
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      meta?: string,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetUsers200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(
        fields,
        limit,
        offset,
        meta,
        sort,
        filter,
        search,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getUsers"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
     * @summary Invite User(s)
     * @param {InviteRequest} [inviteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async invite(
      inviteRequest?: InviteRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUser200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.invite(
        inviteRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.invite"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Disables two-factor authentication for the currently authenticated user.
     * @summary Disable 2FA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async meTfaDisable(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.meTfaDisable(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.meTfaDisable"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Enables two-factor authentication for the currently authenticated user.
     * @summary Enable 2FA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async meTfaEnable(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.meTfaEnable(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.meTfaEnable"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
     * @summary Update Last Page
     * @param {UpdateLastUsedPageMeRequest} [updateLastUsedPageMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateLastUsedPageMe(
      updateLastUsedPageMeRequest?: UpdateLastUsedPageMeRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateLastUsedPageMe(
          updateLastUsedPageMeRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.updateLastUsedPageMe"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update the currently authenticated user.
     * @summary Update Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMe(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateUser200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateMe(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.updateMe"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update an existing user
     * @summary Update a User
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Users} [users]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      id: string,
      fields?: Array<string>,
      meta?: string,
      users?: Users,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ServerInfo200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(
        id,
        fields,
        meta,
        users,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.updateUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update multiple users at the same time.
     * @summary Update Multiple Users
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateUsersRequest} [updateUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUsers(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateUsersRequest?: UpdateUsersRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetUsers200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsers(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        updateUsersRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.updateUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     * Accepts and enables an invited user using a JWT invitation token.
     * @summary Accept User Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInvite(
      acceptInviteRequest: AcceptInviteRequest,
      options?: any,
    ): AxiosPromise<CreateUser200Response> {
      return localVarFp
        .acceptInvite(acceptInviteRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a new user.
     * @summary Create a User
     * @param {string} [meta] What metadata to return in the response.
     * @param {Users} [users]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(
      meta?: string,
      users?: Users,
      options?: any,
    ): AxiosPromise<CreateUser200Response> {
      return localVarFp
        .createUser(meta, users, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete an existing user
     * @summary Delete a User
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete multiple existing users.
     * @summary Delete Multiple Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteUsers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve the currently authenticated user.
     * @summary Retrieve Current User
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(
      fields?: Array<string>,
      meta?: string,
      options?: any,
    ): AxiosPromise<CreateUser200Response> {
      return localVarFp
        .getMe(fields, meta, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve a single user by unique identifier.
     * @summary Retrieve a User
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(
      id: string,
      fields?: Array<string>,
      meta?: string,
      options?: any,
    ): AxiosPromise<CreateUser200Response> {
      return localVarFp
        .getUser(id, fields, meta, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List the users.
     * @summary List Users
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      meta?: string,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      options?: any,
    ): AxiosPromise<GetUsers200Response> {
      return localVarFp
        .getUsers(fields, limit, offset, meta, sort, filter, search, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
     * @summary Invite User(s)
     * @param {InviteRequest} [inviteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invite(
      inviteRequest?: InviteRequest,
      options?: any,
    ): AxiosPromise<CreateUser200Response> {
      return localVarFp
        .invite(inviteRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Disables two-factor authentication for the currently authenticated user.
     * @summary Disable 2FA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meTfaDisable(options?: any): AxiosPromise<void> {
      return localVarFp
        .meTfaDisable(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Enables two-factor authentication for the currently authenticated user.
     * @summary Enable 2FA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    meTfaEnable(options?: any): AxiosPromise<void> {
      return localVarFp
        .meTfaEnable(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
     * @summary Update Last Page
     * @param {UpdateLastUsedPageMeRequest} [updateLastUsedPageMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLastUsedPageMe(
      updateLastUsedPageMeRequest?: UpdateLastUsedPageMeRequest,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .updateLastUsedPageMe(updateLastUsedPageMeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update the currently authenticated user.
     * @summary Update Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMe(options?: any): AxiosPromise<CreateUser200Response> {
      return localVarFp
        .updateMe(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update an existing user
     * @summary Update a User
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {Users} [users]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(
      id: string,
      fields?: Array<string>,
      meta?: string,
      users?: Users,
      options?: any,
    ): AxiosPromise<ServerInfo200Response> {
      return localVarFp
        .updateUser(id, fields, meta, users, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update multiple users at the same time.
     * @summary Update Multiple Users
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateUsersRequest} [updateUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateUsersRequest?: UpdateUsersRequest,
      options?: any,
    ): AxiosPromise<GetUsers200Response> {
      return localVarFp
        .updateUsers(
          fields,
          limit,
          meta,
          offset,
          sort,
          filter,
          search,
          updateUsersRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * Accepts and enables an invited user using a JWT invitation token.
   * @summary Accept User Invite
   * @param {AcceptInviteRequest} acceptInviteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public acceptInvite(
    acceptInviteRequest: AcceptInviteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .acceptInvite(acceptInviteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a new user.
   * @summary Create a User
   * @param {string} [meta] What metadata to return in the response.
   * @param {Users} [users]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public createUser(
    meta?: string,
    users?: Users,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .createUser(meta, users, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete an existing user
   * @summary Delete a User
   * @param {string} id Unique identifier for the object.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteUser(id: string, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .deleteUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete multiple existing users.
   * @summary Delete Multiple Users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteUsers(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .deleteUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve the currently authenticated user.
   * @summary Retrieve Current User
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getMe(
    fields?: Array<string>,
    meta?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .getMe(fields, meta, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve a single user by unique identifier.
   * @summary Retrieve a User
   * @param {string} id Unique identifier for the object.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUser(
    id: string,
    fields?: Array<string>,
    meta?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .getUser(id, fields, meta, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List the users.
   * @summary List Users
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {string} [meta] What metadata to return in the response.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUsers(
    fields?: Array<string>,
    limit?: number,
    offset?: number,
    meta?: string,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .getUsers(fields, limit, offset, meta, sort, filter, search, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
   * @summary Invite User(s)
   * @param {InviteRequest} [inviteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public invite(
    inviteRequest?: InviteRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .invite(inviteRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Disables two-factor authentication for the currently authenticated user.
   * @summary Disable 2FA
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public meTfaDisable(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .meTfaDisable(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Enables two-factor authentication for the currently authenticated user.
   * @summary Enable 2FA
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public meTfaEnable(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .meTfaEnable(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
   * @summary Update Last Page
   * @param {UpdateLastUsedPageMeRequest} [updateLastUsedPageMeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateLastUsedPageMe(
    updateLastUsedPageMeRequest?: UpdateLastUsedPageMeRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .updateLastUsedPageMe(updateLastUsedPageMeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update the currently authenticated user.
   * @summary Update Current User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateMe(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .updateMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update an existing user
   * @summary Update a User
   * @param {string} id Unique identifier for the object.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {Users} [users]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUser(
    id: string,
    fields?: Array<string>,
    meta?: string,
    users?: Users,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .updateUser(id, fields, meta, users, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update multiple users at the same time.
   * @summary Update Multiple Users
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {string} [meta] What metadata to return in the response.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {UpdateUsersRequest} [updateUsersRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUsers(
    fields?: Array<string>,
    limit?: number,
    meta?: string,
    offset?: number,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    updateUsersRequest?: UpdateUsersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .updateUsers(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        updateUsersRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
