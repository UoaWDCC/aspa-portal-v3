/* tslint:disable */
/* eslint-disable */
/**
 * Dynamic API Specification
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 10.13.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { CreateFile200Response } from "../models";
// @ts-ignore
import type { CreateFileRequest } from "../models";
// @ts-ignore
import type { GetAsset404Response } from "../models";
// @ts-ignore
import type { GetFiles200Response } from "../models";
// @ts-ignore
import type { UpdateFileRequestFolder } from "../models";
// @ts-ignore
import type { UpdateFilesRequest } from "../models";
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Create a new file
     * @summary Create a File
     * @param {CreateFileRequest} [createFileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile: async (
      createFileRequest?: CreateFileRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createFileRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an existing file.
     * @summary Delete a File
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteFile", "id", id);
      const localVarPath = `/files/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete multiple existing files.
     * @summary Delete Multiple Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFiles: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve a single file by unique identifier.
     * @summary Retrieve a Files
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile: async (
      id: string,
      fields?: Array<string>,
      meta?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFile", "id", id);
      const localVarPath = `/files/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List the files.
     * @summary List Files
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiles: async (
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      meta?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update an existing file, and/or replace it\'s file contents.
     * @summary Update a File
     * @param {string} id Unique identifier for the object.
     * @param {any} file File contents.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {string} [title] Title for the file. Is extracted from the filename on upload, but can be edited by the user.
     * @param {string} [filenameDownload] Preferred filename when file is downloaded.
     * @param {string | null} [description] Description for the file.
     * @param {UpdateFileRequestFolder | null} [folder]
     * @param {Array<string> | null} [tags] Tags for the file. Is automatically populated based on Exif data for images.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile: async (
      id: string,
      file: any,
      fields?: Array<string>,
      meta?: string,
      title?: string,
      filenameDownload?: string,
      description?: string | null,
      folder?: UpdateFileRequestFolder | null,
      tags?: Array<string> | null,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateFile", "id", id);
      // verify required parameter 'file' is not null or undefined
      assertParamExists("updateFile", "file", file);
      const localVarPath = `/files/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (title !== undefined) {
        localVarFormParams.set("title", title as any);
      }

      if (filenameDownload !== undefined) {
        localVarFormParams.set("filename_download", filenameDownload as any);
      }

      if (description !== undefined) {
        localVarFormParams.set("description", description as any);
      }

      if (folder !== undefined) {
        localVarFormParams.set("folder", folder as any);
      }
      if (tags) {
        localVarFormParams.set("tags", tags.join(COLLECTION_FORMATS.csv));
      }

      if (file !== undefined) {
        localVarFormParams.set("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] =
        "application/x-www-form-urlencoded";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update multiple files at the same time.
     * @summary Update Multiple Files
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateFilesRequest} [updateFilesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFiles: async (
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateFilesRequest?: UpdateFilesRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFilesRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new file
     * @summary Create a File
     * @param {CreateFileRequest} [createFileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFile(
      createFileRequest?: CreateFileRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateFile200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createFile(
        createFileRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FilesApi.createFile"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an existing file.
     * @summary Delete a File
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFile(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FilesApi.deleteFile"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete multiple existing files.
     * @summary Delete Multiple Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFiles(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteFiles(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FilesApi.deleteFiles"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve a single file by unique identifier.
     * @summary Retrieve a Files
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFile(
      id: string,
      fields?: Array<string>,
      meta?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateFile200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(
        id,
        fields,
        meta,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FilesApi.getFile"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List the files.
     * @summary List Files
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFiles(
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      meta?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetFiles200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(
        fields,
        limit,
        offset,
        sort,
        filter,
        search,
        meta,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FilesApi.getFiles"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update an existing file, and/or replace it\'s file contents.
     * @summary Update a File
     * @param {string} id Unique identifier for the object.
     * @param {any} file File contents.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {string} [title] Title for the file. Is extracted from the filename on upload, but can be edited by the user.
     * @param {string} [filenameDownload] Preferred filename when file is downloaded.
     * @param {string | null} [description] Description for the file.
     * @param {UpdateFileRequestFolder | null} [folder]
     * @param {Array<string> | null} [tags] Tags for the file. Is automatically populated based on Exif data for images.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateFile(
      id: string,
      file: any,
      fields?: Array<string>,
      meta?: string,
      title?: string,
      filenameDownload?: string,
      description?: string | null,
      folder?: UpdateFileRequestFolder | null,
      tags?: Array<string> | null,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateFile200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateFile(
        id,
        file,
        fields,
        meta,
        title,
        filenameDownload,
        description,
        folder,
        tags,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FilesApi.updateFile"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update multiple files at the same time.
     * @summary Update Multiple Files
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateFilesRequest} [updateFilesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateFiles(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateFilesRequest?: UpdateFilesRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetFiles200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateFiles(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        updateFilesRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["FilesApi.updateFiles"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FilesApiFp(configuration);
  return {
    /**
     * Create a new file
     * @summary Create a File
     * @param {CreateFileRequest} [createFileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFile(
      createFileRequest?: CreateFileRequest,
      options?: any,
    ): AxiosPromise<CreateFile200Response> {
      return localVarFp
        .createFile(createFileRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete an existing file.
     * @summary Delete a File
     * @param {string} id Unique identifier for the object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteFile(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete multiple existing files.
     * @summary Delete Multiple Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFiles(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteFiles(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve a single file by unique identifier.
     * @summary Retrieve a Files
     * @param {string} id Unique identifier for the object.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(
      id: string,
      fields?: Array<string>,
      meta?: string,
      options?: any,
    ): AxiosPromise<CreateFile200Response> {
      return localVarFp
        .getFile(id, fields, meta, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List the files.
     * @summary List Files
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {string} [meta] What metadata to return in the response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiles(
      fields?: Array<string>,
      limit?: number,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      meta?: string,
      options?: any,
    ): AxiosPromise<GetFiles200Response> {
      return localVarFp
        .getFiles(fields, limit, offset, sort, filter, search, meta, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update an existing file, and/or replace it\'s file contents.
     * @summary Update a File
     * @param {string} id Unique identifier for the object.
     * @param {any} file File contents.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {string} [title] Title for the file. Is extracted from the filename on upload, but can be edited by the user.
     * @param {string} [filenameDownload] Preferred filename when file is downloaded.
     * @param {string | null} [description] Description for the file.
     * @param {UpdateFileRequestFolder | null} [folder]
     * @param {Array<string> | null} [tags] Tags for the file. Is automatically populated based on Exif data for images.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFile(
      id: string,
      file: any,
      fields?: Array<string>,
      meta?: string,
      title?: string,
      filenameDownload?: string,
      description?: string | null,
      folder?: UpdateFileRequestFolder | null,
      tags?: Array<string> | null,
      options?: any,
    ): AxiosPromise<CreateFile200Response> {
      return localVarFp
        .updateFile(
          id,
          file,
          fields,
          meta,
          title,
          filenameDownload,
          description,
          folder,
          tags,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Update multiple files at the same time.
     * @summary Update Multiple Files
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {UpdateFilesRequest} [updateFilesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFiles(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      updateFilesRequest?: UpdateFilesRequest,
      options?: any,
    ): AxiosPromise<GetFiles200Response> {
      return localVarFp
        .updateFiles(
          fields,
          limit,
          meta,
          offset,
          sort,
          filter,
          search,
          updateFilesRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
  /**
   * Create a new file
   * @summary Create a File
   * @param {CreateFileRequest} [createFileRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public createFile(
    createFileRequest?: CreateFileRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .createFile(createFileRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete an existing file.
   * @summary Delete a File
   * @param {string} id Unique identifier for the object.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public deleteFile(id: string, options?: RawAxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .deleteFile(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete multiple existing files.
   * @summary Delete Multiple Files
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public deleteFiles(options?: RawAxiosRequestConfig) {
    return FilesApiFp(this.configuration)
      .deleteFiles(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve a single file by unique identifier.
   * @summary Retrieve a Files
   * @param {string} id Unique identifier for the object.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFile(
    id: string,
    fields?: Array<string>,
    meta?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .getFile(id, fields, meta, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List the files.
   * @summary List Files
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {string} [meta] What metadata to return in the response.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public getFiles(
    fields?: Array<string>,
    limit?: number,
    offset?: number,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    meta?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .getFiles(fields, limit, offset, sort, filter, search, meta, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update an existing file, and/or replace it\'s file contents.
   * @summary Update a File
   * @param {string} id Unique identifier for the object.
   * @param {any} file File contents.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {string} [title] Title for the file. Is extracted from the filename on upload, but can be edited by the user.
   * @param {string} [filenameDownload] Preferred filename when file is downloaded.
   * @param {string | null} [description] Description for the file.
   * @param {UpdateFileRequestFolder | null} [folder]
   * @param {Array<string> | null} [tags] Tags for the file. Is automatically populated based on Exif data for images.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public updateFile(
    id: string,
    file: any,
    fields?: Array<string>,
    meta?: string,
    title?: string,
    filenameDownload?: string,
    description?: string | null,
    folder?: UpdateFileRequestFolder | null,
    tags?: Array<string> | null,
    options?: RawAxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .updateFile(
        id,
        file,
        fields,
        meta,
        title,
        filenameDownload,
        description,
        folder,
        tags,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update multiple files at the same time.
   * @summary Update Multiple Files
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {string} [meta] What metadata to return in the response.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {UpdateFilesRequest} [updateFilesRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FilesApi
   */
  public updateFiles(
    fields?: Array<string>,
    limit?: number,
    meta?: string,
    offset?: number,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    updateFilesRequest?: UpdateFilesRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return FilesApiFp(this.configuration)
      .updateFiles(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        updateFilesRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
