/* tslint:disable */
/* eslint-disable */
/**
 * Dynamic API Specification
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 10.13.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { CreateItemsEvent200Response } from "../models";
// @ts-ignore
import type { CreateItemsEventRequest } from "../models";
// @ts-ignore
import type { GetAsset404Response } from "../models";
// @ts-ignore
import type { ItemsEvent } from "../models";
// @ts-ignore
import type { ReadItemsEvent200Response } from "../models";
// @ts-ignore
import type { ReadSingleItemsEvent200Response } from "../models";
// @ts-ignore
import type { ReadSingleItemsEventIdParameter } from "../models";
// @ts-ignore
import type { UpdateItemsEvent200Response } from "../models";
/**
 * ItemsEventApi - axios parameter creator
 * @export
 */
export const ItemsEventApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Create a new Event item.
     * @summary Create an Item
     * @param {string} [meta] What metadata to return in the response.
     * @param {CreateItemsEventRequest} [createItemsEventRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItemsEvent: async (
      meta?: string,
      createItemsEventRequest?: CreateItemsEventRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/items/Event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createItemsEventRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete multiple existing Event items.
     * @summary Delete Multiple Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemsEvent: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/items/Event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Delete an existing Event item.
     * @summary Delete an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSingleItemsEvent: async (
      id: ReadSingleItemsEventIdParameter,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteSingleItemsEvent", "id", id);
      const localVarPath = `/items/Event/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * List the Event items.
     * @summary List Items
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readItemsEvent: async (
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/items/Event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Auth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve a single Event item by unique identifier.
     * @summary Retrieve an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {string} [version] Retrieve an item\&#39;s state from a specific Content Version. The value corresponds to the \&quot;key\&quot; of the Content Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSingleItemsEvent: async (
      id: ReadSingleItemsEventIdParameter,
      fields?: Array<string>,
      meta?: string,
      version?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("readSingleItemsEvent", "id", id);
      const localVarPath = `/items/Event/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (version !== undefined) {
        localVarQueryParameter["version"] = version;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update multiple Event items at the same time.
     * @summary Update Multiple Items
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {CreateItemsEventRequest} [createItemsEventRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemsEvent: async (
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      createItemsEventRequest?: CreateItemsEventRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/items/Event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (sort) {
        localVarQueryParameter["sort"] = sort.join(COLLECTION_FORMATS.csv);
      }

      if (filter !== undefined) {
        localVarQueryParameter["filter"] = filter;
      }

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createItemsEventRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update an existing Event item.
     * @summary Update an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {ItemsEvent} [itemsEvent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSingleItemsEvent: async (
      id: ReadSingleItemsEventIdParameter,
      fields?: Array<string>,
      meta?: string,
      itemsEvent?: ItemsEvent,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateSingleItemsEvent", "id", id);
      const localVarPath = `/items/Event/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (fields) {
        localVarQueryParameter["fields"] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (meta !== undefined) {
        localVarQueryParameter["meta"] = meta;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        itemsEvent,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ItemsEventApi - functional programming interface
 * @export
 */
export const ItemsEventApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ItemsEventApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a new Event item.
     * @summary Create an Item
     * @param {string} [meta] What metadata to return in the response.
     * @param {CreateItemsEventRequest} [createItemsEventRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createItemsEvent(
      meta?: string,
      createItemsEventRequest?: CreateItemsEventRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateItemsEvent200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createItemsEvent(
          meta,
          createItemsEventRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ItemsEventApi.createItemsEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete multiple existing Event items.
     * @summary Delete Multiple Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteItemsEvent(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteItemsEvent(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ItemsEventApi.deleteItemsEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Delete an existing Event item.
     * @summary Delete an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSingleItemsEvent(
      id: ReadSingleItemsEventIdParameter,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteSingleItemsEvent(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ItemsEventApi.deleteSingleItemsEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * List the Event items.
     * @summary List Items
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readItemsEvent(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ReadItemsEvent200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.readItemsEvent(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ItemsEventApi.readItemsEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve a single Event item by unique identifier.
     * @summary Retrieve an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {string} [version] Retrieve an item\&#39;s state from a specific Content Version. The value corresponds to the \&quot;key\&quot; of the Content Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async readSingleItemsEvent(
      id: ReadSingleItemsEventIdParameter,
      fields?: Array<string>,
      meta?: string,
      version?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ReadSingleItemsEvent200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.readSingleItemsEvent(
          id,
          fields,
          meta,
          version,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ItemsEventApi.readSingleItemsEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update multiple Event items at the same time.
     * @summary Update Multiple Items
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {CreateItemsEventRequest} [createItemsEventRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateItemsEvent(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      createItemsEventRequest?: CreateItemsEventRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UpdateItemsEvent200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateItemsEvent(
          fields,
          limit,
          meta,
          offset,
          sort,
          filter,
          search,
          createItemsEventRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ItemsEventApi.updateItemsEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Update an existing Event item.
     * @summary Update an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {ItemsEvent} [itemsEvent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSingleItemsEvent(
      id: ReadSingleItemsEventIdParameter,
      fields?: Array<string>,
      meta?: string,
      itemsEvent?: ItemsEvent,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ReadSingleItemsEvent200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateSingleItemsEvent(
          id,
          fields,
          meta,
          itemsEvent,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ItemsEventApi.updateSingleItemsEvent"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ItemsEventApi - factory interface
 * @export
 */
export const ItemsEventApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ItemsEventApiFp(configuration);
  return {
    /**
     * Create a new Event item.
     * @summary Create an Item
     * @param {string} [meta] What metadata to return in the response.
     * @param {CreateItemsEventRequest} [createItemsEventRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createItemsEvent(
      meta?: string,
      createItemsEventRequest?: CreateItemsEventRequest,
      options?: any,
    ): AxiosPromise<CreateItemsEvent200Response> {
      return localVarFp
        .createItemsEvent(meta, createItemsEventRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete multiple existing Event items.
     * @summary Delete Multiple Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemsEvent(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteItemsEvent(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Delete an existing Event item.
     * @summary Delete an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSingleItemsEvent(
      id: ReadSingleItemsEventIdParameter,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteSingleItemsEvent(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * List the Event items.
     * @summary List Items
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readItemsEvent(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      options?: any,
    ): AxiosPromise<ReadItemsEvent200Response> {
      return localVarFp
        .readItemsEvent(
          fields,
          limit,
          meta,
          offset,
          sort,
          filter,
          search,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve a single Event item by unique identifier.
     * @summary Retrieve an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {string} [version] Retrieve an item\&#39;s state from a specific Content Version. The value corresponds to the \&quot;key\&quot; of the Content Version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readSingleItemsEvent(
      id: ReadSingleItemsEventIdParameter,
      fields?: Array<string>,
      meta?: string,
      version?: string,
      options?: any,
    ): AxiosPromise<ReadSingleItemsEvent200Response> {
      return localVarFp
        .readSingleItemsEvent(id, fields, meta, version, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update multiple Event items at the same time.
     * @summary Update Multiple Items
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {number} [limit] A limit on the number of objects that are returned.
     * @param {string} [meta] What metadata to return in the response.
     * @param {number} [offset] How many items to skip when fetching data.
     * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
     * @param {object} [filter] Select items in collection by given conditions.
     * @param {string} [search] Filter by items that contain the given search query in one of their fields.
     * @param {CreateItemsEventRequest} [createItemsEventRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemsEvent(
      fields?: Array<string>,
      limit?: number,
      meta?: string,
      offset?: number,
      sort?: Array<string>,
      filter?: object,
      search?: string,
      createItemsEventRequest?: CreateItemsEventRequest,
      options?: any,
    ): AxiosPromise<UpdateItemsEvent200Response> {
      return localVarFp
        .updateItemsEvent(
          fields,
          limit,
          meta,
          offset,
          sort,
          filter,
          search,
          createItemsEventRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Update an existing Event item.
     * @summary Update an Item
     * @param {ReadSingleItemsEventIdParameter} id Index of the item.
     * @param {Array<string>} [fields] Control what fields are being returned in the object.
     * @param {string} [meta] What metadata to return in the response.
     * @param {ItemsEvent} [itemsEvent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSingleItemsEvent(
      id: ReadSingleItemsEventIdParameter,
      fields?: Array<string>,
      meta?: string,
      itemsEvent?: ItemsEvent,
      options?: any,
    ): AxiosPromise<ReadSingleItemsEvent200Response> {
      return localVarFp
        .updateSingleItemsEvent(id, fields, meta, itemsEvent, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ItemsEventApi - object-oriented interface
 * @export
 * @class ItemsEventApi
 * @extends {BaseAPI}
 */
export class ItemsEventApi extends BaseAPI {
  /**
   * Create a new Event item.
   * @summary Create an Item
   * @param {string} [meta] What metadata to return in the response.
   * @param {CreateItemsEventRequest} [createItemsEventRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemsEventApi
   */
  public createItemsEvent(
    meta?: string,
    createItemsEventRequest?: CreateItemsEventRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemsEventApiFp(this.configuration)
      .createItemsEvent(meta, createItemsEventRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete multiple existing Event items.
   * @summary Delete Multiple Items
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemsEventApi
   */
  public deleteItemsEvent(options?: RawAxiosRequestConfig) {
    return ItemsEventApiFp(this.configuration)
      .deleteItemsEvent(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Delete an existing Event item.
   * @summary Delete an Item
   * @param {ReadSingleItemsEventIdParameter} id Index of the item.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemsEventApi
   */
  public deleteSingleItemsEvent(
    id: ReadSingleItemsEventIdParameter,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemsEventApiFp(this.configuration)
      .deleteSingleItemsEvent(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * List the Event items.
   * @summary List Items
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {string} [meta] What metadata to return in the response.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemsEventApi
   */
  public readItemsEvent(
    fields?: Array<string>,
    limit?: number,
    meta?: string,
    offset?: number,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemsEventApiFp(this.configuration)
      .readItemsEvent(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve a single Event item by unique identifier.
   * @summary Retrieve an Item
   * @param {ReadSingleItemsEventIdParameter} id Index of the item.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {string} [version] Retrieve an item\&#39;s state from a specific Content Version. The value corresponds to the \&quot;key\&quot; of the Content Version.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemsEventApi
   */
  public readSingleItemsEvent(
    id: ReadSingleItemsEventIdParameter,
    fields?: Array<string>,
    meta?: string,
    version?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemsEventApiFp(this.configuration)
      .readSingleItemsEvent(id, fields, meta, version, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update multiple Event items at the same time.
   * @summary Update Multiple Items
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {number} [limit] A limit on the number of objects that are returned.
   * @param {string} [meta] What metadata to return in the response.
   * @param {number} [offset] How many items to skip when fetching data.
   * @param {Array<string>} [sort] How to sort the returned items. &#x60;sort&#x60; is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (&#x60; - &#x60;) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a &#x60; ? &#x60; to sort randomly.
   * @param {object} [filter] Select items in collection by given conditions.
   * @param {string} [search] Filter by items that contain the given search query in one of their fields.
   * @param {CreateItemsEventRequest} [createItemsEventRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemsEventApi
   */
  public updateItemsEvent(
    fields?: Array<string>,
    limit?: number,
    meta?: string,
    offset?: number,
    sort?: Array<string>,
    filter?: object,
    search?: string,
    createItemsEventRequest?: CreateItemsEventRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemsEventApiFp(this.configuration)
      .updateItemsEvent(
        fields,
        limit,
        meta,
        offset,
        sort,
        filter,
        search,
        createItemsEventRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update an existing Event item.
   * @summary Update an Item
   * @param {ReadSingleItemsEventIdParameter} id Index of the item.
   * @param {Array<string>} [fields] Control what fields are being returned in the object.
   * @param {string} [meta] What metadata to return in the response.
   * @param {ItemsEvent} [itemsEvent]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemsEventApi
   */
  public updateSingleItemsEvent(
    id: ReadSingleItemsEventIdParameter,
    fields?: Array<string>,
    meta?: string,
    itemsEvent?: ItemsEvent,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemsEventApiFp(this.configuration)
      .updateSingleItemsEvent(id, fields, meta, itemsEvent, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
