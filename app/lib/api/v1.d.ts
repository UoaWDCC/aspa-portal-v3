/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Events
     * @description Returns an array of events.
     */
    get: {
      parameters: {
        query: {
          /** @description Page number you wish to fetch. */
          page: components["parameters"]["Page"];
          /** @description Page size of the results you wish to fetch. */
          pageSize?: components["parameters"]["PageSize"];
          /** @description If true, return only events that have an endDate in the future. */
          inFutureOnly?: components["parameters"]["InFutureOnly"];
          /** @description Results since this date-time (ISO 8601). */
          since?: components["parameters"]["Since"];
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An array of event objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["PaginatedResponse"] & {
              events: components["schemas"]["Event"][];
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    /**
     * Create Event
     * @description Create a base event. Requires special user permission to use this endpoint, activated by Humanitix.
     */
    post: {
      parameters: {
        query?: {
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateEventRequest"];
        };
      };
      responses: {
        /** @description A single event object */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ForbiddenError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Event
     * @description Returns an event for the given eventId.
     */
    get: {
      parameters: {
        query?: {
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A single event object */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Event. Requires special user permission to use this endpoint, activated by Humanitix.
     * @description Update an event
     */
    patch: {
      parameters: {
        query?: {
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateEventRequest"];
        };
      };
      responses: {
        /** @description A single event object */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Event"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ForbiddenError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    trace?: never;
  };
  "/v1/events/{eventId}/check-in-count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Event check in count (BETA)
     * @description Returns a check in count object for a given eventId and eventDateId for all tickets that have had sales (this endpoint is in Beta and is subject to change).
     */
    get: {
      parameters: {
        query: {
          /** @description ID of the event on a specific date. */
          eventDateId: components["parameters"]["EventDateIdRequired"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Check in information for an eventDate. Total check ins and check ins by ticket type for tickets with sales (sorted by number of check ins, descending). */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CheckInCountResult"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}/orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Orders
     * @description Returns all orders for a given event and eventDateId.
     */
    get: {
      parameters: {
        query: {
          /** @description ID of the event on a specific date. */
          eventDateId?: components["parameters"]["EventDateId"];
          /** @description Page number you wish to fetch. */
          page: components["parameters"]["Page"];
          /** @description Page size of the results you wish to fetch. */
          pageSize?: components["parameters"]["PageSize"];
          /** @description Results since this date-time (ISO 8601). */
          since?: components["parameters"]["Since"];
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An array of order objects. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["PaginatedResponse"] & {
              orders: components["schemas"]["Order"][];
            };
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}/orders/{orderId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Order
     * @description Returns an order for the given eventId.
     */
    get: {
      parameters: {
        query?: {
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
          /** @description ID of the order. */
          orderId: components["parameters"]["OrderId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A single order object. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Order"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}/tickets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Tickets
     * @description Returns all tickets for an event.
     */
    get: {
      parameters: {
        query: {
          /** @description ID of the event on a specific date. */
          eventDateId?: components["parameters"]["EventDateId"];
          /** @description Page number you wish to fetch. */
          page: components["parameters"]["Page"];
          /** @description Page size of the results you wish to fetch. */
          pageSize?: components["parameters"]["PageSize"];
          /** @description Ticket status you wish to fetch. */
          status?: components["parameters"]["Status"];
          /** @description Results since this date-time (ISO 8601). */
          since?: components["parameters"]["Since"];
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An array of ticket objects. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["PaginatedResponse"] & {
              tickets: components["schemas"]["Ticket"][];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}/tickets/{ticketId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Ticket
     * @description Returns a ticket for the given eventId and ticketId.
     */
    get: {
      parameters: {
        query?: {
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
          /** @description ID of the ticket. */
          ticketId: components["parameters"]["TicketId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A single ticket object. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Ticket"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}/tickets/{ticketId}/transfer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Transfer Ticket
     * @description Transfers a ticket from one person to another. Requires special user permission to use this endpoint, activated by Humanitix.
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description The API key of the user who has permission to perform the requested action. */
          "x-access-api-key": components["parameters"]["AccessApiKey"];
        };
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
          /** @description ID of the ticket. */
          ticketId: components["parameters"]["TicketId"];
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TransferTicketRequest"];
        };
      };
      responses: {
        /** @description The modified ticket object. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["TransferTicketResult"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ForbiddenError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnprocessableEntityError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}/tickets/{ticketId}/check-in": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Check in
     * @description Update the ticket to check it in
     */
    post: {
      parameters: {
        query?: {
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
          /** @description ID of the ticket. */
          ticketId: components["parameters"]["TicketId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Any scanning messages for the ticket */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CheckInOutResult"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ForbiddenError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnprocessableEntityError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/events/{eventId}/tickets/{ticketId}/check-out": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Check out
     * @description Update the ticket to check it out
     */
    post: {
      parameters: {
        query?: {
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
        };
        header?: never;
        path: {
          /** @description ID of the event. */
          eventId: components["parameters"]["EventId"];
          /** @description ID of the ticket. */
          ticketId: components["parameters"]["TicketId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Any scanning messages for the ticket */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["CheckInOutResult"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ForbiddenError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Unprocessable Entity */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnprocessableEntityError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Tags
     * @description Returns all tags for a user.
     */
    get: {
      parameters: {
        query: {
          /** @description Page number you wish to fetch. */
          page: components["parameters"]["Page"];
          /** @description Page size of the results you wish to fetch. */
          pageSize?: components["parameters"]["PageSize"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An array of tag objects. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["PaginatedResponse"] & {
              tags: components["schemas"]["Tag"][];
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tags/{tagId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Tag
     * @description Returns a tag for the given tagId.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the tag. */
          tagId: components["parameters"]["TagId"];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A single tag object. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Tag"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["NotFoundError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/global/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Events global
     * @description Returns an array of events from across the platform. Requires special user permission to use this endpoint, activated by Humanitix.
     */
    get: {
      parameters: {
        query: {
          /** @description Page number you wish to fetch. */
          page: components["parameters"]["Page"];
          /** @description Page size of the results you wish to fetch. */
          pageSize?: components["parameters"]["PageSize"];
          /** @description Filter events where "event.classification.type" matches this field. */
          type?: components["parameters"]["Type"];
          /** @description Filter events where "event.classification.category" matches this field. */
          category?: components["parameters"]["Category"];
          /** @description Filter events where "event.classification.subcategory" matches this field. If this parameter is provided, then "#/components/parameters/Category" must also be provided. */
          subcategory?: components["parameters"]["Subcategory"];
          /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
          overrideLocation?: components["parameters"]["OverrideLocation"];
          /** @description If true, return only events that have artists. */
          withArtistsOnly?: components["parameters"]["WithArtistsOnly"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An array of event objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["PaginatedResponse"] & {
              events: components["schemas"]["Event"][];
            };
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BadRequestError"];
          };
        };
        /** @description Unauthorised */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["UnauthorizedError"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ForbiddenError"];
          };
        };
        /** @description Internal Server Error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InternalServerError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Event: {
      _id: components["schemas"]["EventId"];
      userId: components["schemas"]["UserId"];
      organiserId?: components["schemas"]["OrganiserId"];
      currency: components["schemas"]["Currency"];
      /** @example Hobbit Dance Off */
      name: string;
      /** @example Where hobbits from all across the shire come to show off their movies! */
      description: string;
      /** @example hobbit-dance-off */
      slug: string;
      /** @example https://events.humanitix.com/hobbit-dance-off */
      url?: string;
      tagIds?: string[];
      /** @example community */
      category?: string;
      classification?: components["schemas"]["EventClassification"];
      artists?: components["schemas"]["Artist"][];
      public: boolean;
      published: boolean;
      suspendSales?: boolean;
      markedAsSoldOut?: boolean;
      startDate?: components["schemas"]["Date"];
      endDate?: components["schemas"]["Date"];
      timezone: components["schemas"]["Timezone"];
      /** @example 1000 */
      totalCapacity: number;
      ticketTypes?: components["schemas"]["TicketType"][];
      pricing?: components["schemas"]["Pricing"];
      paymentOptions?: components["schemas"]["PaymentOptions"];
      publishedAt?: components["schemas"]["Date"];
      additionalQuestions?: components["schemas"]["AdditionalQuestions"][];
      bannerImage?: components["schemas"]["Image"];
      featureImage?: components["schemas"]["Image"];
      socialImage?: components["schemas"]["Image"];
      eventLocation?: components["schemas"]["EventLocation"];
      dates?: components["schemas"]["DateRange"][];
      packagedTickets?: components["schemas"]["PackagedTickets"][];
      accessibility?: components["schemas"]["Accessibility"];
      affiliateCode?: {
        code: string;
      };
      keywords?: string[];
      location: components["schemas"]["Location"];
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    Order: {
      _id: components["schemas"]["OrderId"];
      eventId?: components["schemas"]["EventId"];
      userId?: components["schemas"]["UserId"];
      currency: components["schemas"]["Currency"];
      eventDateId?: components["schemas"]["EventDateId"];
      /** @enum {string} */
      status: "complete";
      /** @enum {string} */
      financialStatus: "free" | "paid" | "partiallyRefunded" | "refunded";
      firstName?: components["schemas"]["FirstName"];
      lastName?: components["schemas"]["LastName"];
      /** @example ABC School */
      organisation?: string;
      mobile?: components["schemas"]["Mobile"];
      email?: components["schemas"]["Email"];
      accessCode?: components["schemas"]["AccessCode"];
      discounts?: components["schemas"]["Discounts"];
      businessPurpose?: boolean;
      /** @example 12345678901 */
      businessTaxId?: string;
      /** @example ABC School */
      businessName?: string;
      /** @enum {string} */
      paymentType?:
        | "cash"
        | "complimentary"
        | "voucher"
        | "bankDeposit"
        | "eftpos"
        | "payPal"
        | "noPaymentNecessary"
        | "other";
      /** @enum {string} */
      paymentGateway?:
        | "manual"
        | "gift-card"
        | "credit"
        | "discover-nsw"
        | "invoice"
        | "paypal"
        | "bpoint"
        | "afterpay"
        | "zipmoney"
        | "stripe-payments"
        | "stripe"
        | "worldpay"
        | "till"
        | "tillTerminal"
        | "pin"
        | "braintree"
        | "cash";
      manualOrder: boolean;
      tipFees?: boolean;
      /**
       * Format: double
       * @example 5
       */
      clientDonation?: number;
      /** @example Example note */
      notes?: string;
      organiserMailListOptIn?: boolean;
      incompleteAt?: components["schemas"]["Date"];
      completedAt?: components["schemas"]["Date"];
      /** @example 5d0ae7ef9d3e67012780u70d */
      waitlistOfferId?: string;
      isInternationalTransaction?: boolean;
      totals?: components["schemas"]["OrderTotals"];
      purchaseTotals?: components["schemas"]["OrderTotals"];
      additionalFields?: components["schemas"]["AdditionalFields"][];
      salesChannel: components["schemas"]["SalesChannel"];
      location: components["schemas"]["Location"];
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    Ticket: {
      _id: components["schemas"]["TicketId"];
      eventId: components["schemas"]["EventId"];
      orderId: components["schemas"]["OrderId"];
      orderName: components["schemas"]["OrderName"];
      currency: components["schemas"]["Currency"];
      /** @example 1 */
      number?: number;
      firstName?: components["schemas"]["FirstName"];
      lastName?: components["schemas"]["LastName"];
      /** @example Free Peoples */
      organisation?: string;
      eventDateId: components["schemas"]["EventDateId"];
      ticketTypeName: components["schemas"]["TicketTypeName"];
      ticketTypeId: components["schemas"]["TicketTypeId"];
      accessCode?: components["schemas"]["AccessCode"];
      /**
       * Format: double
       * @example 37.5
       */
      price?: number;
      /**
       * Format: double
       * @example 0
       */
      discount: number;
      /**
       * Format: double
       * @example 37.5
       */
      netPrice: number;
      /**
       * Format: double
       * @example 3.41
       */
      taxes: number;
      /**
       * Format: double
       * @example 2.49
       */
      fee: number;
      /**
       * Format: double
       * @example 0
       */
      passedOnFee?: number;
      /**
       * Format: double
       * @example 0
       */
      absorbedFee?: number;
      /**
       * Format: double
       * @example 0
       */
      dgrDonation?: number;
      /**
       * Format: double
       * @example 39.99
       */
      total?: number;
      /** @example 29002208237292 */
      customScanningCode?: string;
      seatingLocation?: {
        /** @example 5b4d44e0d76d957e9c672907 */
        seatingMapId?: string;
        /** @example Section C Table 49 Seat 10 */
        name?: string;
        section?: components["schemas"]["SeatingLocationId"];
        table?: components["schemas"]["SeatingLocationId"];
        seat?: components["schemas"]["SeatingLocationId"];
        /** @example Door 2 */
        note?: string;
      };
      /** @enum {string} */
      status: "complete" | "cancelled";
      additionalFields?: components["schemas"]["AdditionalFields"][];
      checkIn?: components["schemas"]["CheckIn"];
      checkInHistory?: components["schemas"]["CheckIn"][];
      cancelledAt?: components["schemas"]["Date"];
      isDonation?: boolean;
      /** @example 5b7364d43bed06000f634bf9 */
      packageId?: string;
      /** @example Family */
      packageName?: string;
      /** @example 5b73675b55aa47000fbdc354 */
      packageGroupId?: string;
      /** @example 120 */
      packagePrice?: number;
      /** @example 5d8d5dbfe40885ede10922d4 */
      attendeeProfileId?: string;
      swappedFrom?: components["schemas"]["TicketSwap"];
      swappedTo?: components["schemas"]["TicketSwap"];
      salesChannel: components["schemas"]["SalesChannel"];
      qrCodeData: components["schemas"]["QrCodeData"];
      discounts?: components["schemas"]["Discounts"];
      location: components["schemas"]["Location"];
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    SharedEventRequestForCreateAndWrite: {
      /** @example Lord of the Rings */
      name?: string;
      /** @example A quest to destroy a powerful ring and defeat a dark lord */
      description?: string;
      timezone?: components["schemas"]["Timezone"];
      eventLocation?: components["schemas"]["CreateUpdateEventLocation"];
      keywords?: string[];
      classification?: components["schemas"]["EventClassification"];
    };
    CreateEventRequest: components["schemas"]["SharedEventRequestForCreateAndWrite"] & {
      dates: components["schemas"]["CreateDateRange"][];
    };
    UpdateEventRequest: components["schemas"]["SharedEventRequestForCreateAndWrite"] & {
      dates?: components["schemas"]["DateOperation"][];
      location?: components["schemas"]["Location"];
    };
    CreateDateRange: {
      startDate: components["schemas"]["Date"];
      endDate: components["schemas"]["Date"];
    };
    DateOperation:
      | components["schemas"]["CreateDateOperation"]
      | components["schemas"]["UpdateDateOperation"]
      | components["schemas"]["DeleteDateOperation"];
    CreateDateOperation: {
      startDate: components["schemas"]["Date"];
      endDate: components["schemas"]["Date"];
      /** @enum {string} */
      operation: "CREATE";
    };
    UpdateDateOperation: {
      _id: components["schemas"]["DateRangeId"];
      startDate: components["schemas"]["Date"];
      endDate: components["schemas"]["Date"];
      /** @enum {string} */
      operation: "UPDATE";
    };
    DeleteDateOperation: {
      _id: components["schemas"]["DateRangeId"];
      /** @enum {string} */
      operation: "DELETE";
    };
    CreateUpdateEventLocation:
      | components["schemas"]["CreateOnlineEventLocation"]
      | components["schemas"]["CreateAddressEventLocation"]
      | components["schemas"]["CreateCustomEventLocation"]
      | components["schemas"]["CreateToBeAnnouncedEventLocation"];
    CreateToBeAnnouncedEventLocation: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "CreateToBeAnnouncedEventLocation";
    };
    CreateOnlineEventLocation: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "CreateOnlineEventLocation";
      /** @example www.zoom.com/hobbit-dance-off */
      onlineUrl?: string;
      /** @example Take the guided tour departing from The Shires rest, 15 minutes from Matamata town centre by car. */
      instructions?: string;
    };
    CreateAddressEventLocation: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "CreateAddressEventLocation";
      /** @example 501 Buckland Road, Hinuera, Matamata 3472, New Zealand */
      address: string;
      /** @example  */
      venueName: string;
      /** @example [
       *       -37.8691623,
       *       175.6802895
       *     ] */
      latLng: number[];
      /**
       * @description See https://developers.google.com/maps/documentation/places/web-service/details#Place-place_id
       * @example ChIJP0sTGs-uMioR7xB_WgdR9Bo
       */
      placeId?: string;
      addressComponents?: components["schemas"]["CreateGoogleAddressComponents"][];
    };
    CreateCustomEventLocation: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "CreateCustomEventLocation";
      /** @example 501 Buckland Road, Hinuera, Matamata 3472, New Zealand */
      address: string;
      /** @example Hobbiton Movie Set Tours */
      venueName: string;
    };
    /** @description See https://developers.google.com/maps/documentation/places/web-service/details#AddressComponent */
    CreateGoogleAddressComponents: {
      long_name?: string;
      short_name?: string;
      types?: string[];
    };
    TransferTicketRequest: {
      firstName: components["schemas"]["FirstName"];
      lastName: components["schemas"]["LastName"];
      email: components["schemas"]["Email"];
      mobile: components["schemas"]["Mobile"];
    };
    TransferTicketResult: components["schemas"]["Ticket"] & {
      /** @description Describes whether the order has any unanswered required questions after swapping. Use 'orderEditLink' to answer these questions. */
      orderHasUnansweredRequiredQuestions: boolean;
      /**
       * @description The URL where the order this ticket is part of can be edited. Use this to answer any unanswered required questions (use the 'orderHasUnansweredRequiredQuestions' field to know if there are any).
       * @example https://events.humanitix.net/public/edit-order/603a26fa7305b6000ba2d020/307d1a70a98fc6005ab4fde3?token=jwtToken
       */
      orderEditLink: string;
    };
    Tag: {
      _id: components["schemas"]["TagId"];
      /**
       * @description The name of the tag.
       * @example People & Culture
       */
      name: string;
      /**
       * @description The userId of the user that this tag belongs to.
       * @example uSgT2laduVWphGdUGJ1pd9G5NqG2
       */
      userId: string;
      location: components["schemas"]["Location"];
      createdAt?: components["schemas"]["Date"];
      updatedAt?: components["schemas"]["Date"];
    };
    CheckInCountResult: {
      eventId: components["schemas"]["EventId"];
      eventDateId: components["schemas"]["EventDateId"];
      /**
       * @description The number of check ins across all ticket types.
       * @example 732
       */
      checkedIn: number;
      ticketTypes: {
        ticketTypeId: components["schemas"]["TicketTypeId"];
        ticketTypeName: components["schemas"]["TicketTypeName"];
        /** @example 732 */
        checkedIn: number;
      }[];
    };
    Error: {
      statusCode: number;
      error: string;
      message: string;
    };
    BadRequestError: components["schemas"]["Error"] & {
      /** @example 400 */
      statusCode?: unknown;
      /** @example Bad Request */
      error?: unknown;
      /** @example query should have required property 'page' */
      message?: unknown;
    };
    UnauthorizedError: components["schemas"]["Error"] & {
      /** @example 401 */
      statusCode?: unknown;
      /** @example Unauthorized */
      error?: unknown;
      /** @example Invalid API Key. */
      message?: unknown;
    };
    ForbiddenError: components["schemas"]["Error"] & {
      /** @example 403 */
      statusCode?: unknown;
      /** @example Forbidden */
      error?: unknown;
      /** @example User: uSgT1ladrVWphGdUGJ1pd9G5NqG2 does not have permission to transfer tickets. */
      message?: unknown;
    };
    NotFoundError: components["schemas"]["Error"] & {
      /** @example 404 */
      statusCode?: unknown;
      /** @example Not Found */
      error?: unknown;
      /** @example Event with id: 5ac5a094d8fe7c0c0f212fe2 not found. */
      message?: unknown;
    };
    UnprocessableEntityError: components["schemas"]["Error"] & {
      /** @example 422 */
      statusCode?: unknown;
      /** @example Unprocessable Entity */
      error?: unknown;
      /** @example Ticket with id: 5ac5c6090a8084000f27f15d has invalid status: cancelled, must be status: completed. */
      message?: unknown;
    };
    /** @description Internal Server Error */
    InternalServerError: components["schemas"]["Error"] & {
      /** @example 500 */
      statusCode?: unknown;
      /** @example Internal Server Error */
      error?: unknown;
      /** @example Something went wrong. */
      message?: unknown;
    };
    /** @example nEOqx8s9UueyRu48789C0sY9set1 */
    UserId: string;
    /** @example 5ac598ccd8fe7c0c0f212e2a */
    EventId: string;
    /** @example 5ac599d1a488620e6cd01d87 */
    OrderId: string;
    /** @example 5da50970ec90824b5ca3608f */
    TicketId: string;
    /** @example 5d806e987b0ffa3b26a8fc2b */
    TagId: string;
    /** @example 5ac598ccd8fe7c0c0f212e2f */
    EventDateId: string;
    /** @example 5ac597aed8fe7c0c0f212e27 */
    OrganiserId: string;
    /** @example 5c9c25e08965939104239aab */
    DateRangeId: string;
    /** @example 5da50970ec90824b5ca3608f */
    TicketTypeId: string;
    /** @example 5da50970ec90824b5ca3608f */
    PackagedTicketsId: string;
    /** @example General Admission */
    TicketTypeName: string;
    /** @example 0064YQ47 */
    OrderName: string;
    /** @example 5ac5c5e85aec29000ff064f4 */
    AdditionalQuestionId: string;
    AdditionalQuestions: {
      _id: components["schemas"]["AdditionalQuestionId"];
      /** @enum {string} */
      inputType?: "text" | "number" | "email" | "url" | "date" | "file";
      question: string;
      required: boolean;
      description?: string;
      perOrder: boolean;
      disabled?: boolean;
      createdAt?: components["schemas"]["Date"];
      updatedAt?: components["schemas"]["Date"];
    };
    AdditionalFields: {
      questionId: components["schemas"]["AdditionalQuestionId"];
      /** @example Gluten Free */
      value: string;
      details?: {
        /** @example 501 Buckland Road */
        street?: string;
        /** @example Hinuera */
        suburb?: string;
        /** @example 3472 */
        postalCode?: string;
        /** @example Matamata */
        city?: string;
        /** @example Waikato */
        state?: string;
        /** @example New Zealand */
        country?: string;
      };
    };
    PackagedTickets: {
      _id?: components["schemas"]["PackagedTicketsId"];
      /** @example Family ticket */
      name?: string;
      /** @example 120 */
      price?: number;
      /** @example 125 */
      quantity?: number;
      /** @example Includes 2x Adult ticket and 2x Child ticket */
      description?: string;
      disabled?: boolean;
      deleted?: boolean;
      tickets?: {
        ticketTypeId: components["schemas"]["TicketTypeId"];
        /** @example 2 */
        quantity: number;
      }[];
    };
    /**
     * @example festivalOrFair
     * @enum {string}
     */
    Type:
      | "appearanceOrSigning"
      | "attraction"
      | "campTripOrRetreat"
      | "classTrainingOrWorkshop"
      | "concertOrPerformance"
      | "conference"
      | "convention"
      | "dinnerOrGala"
      | "festivalOrFair"
      | "gameOrCompetition"
      | "meetingOrNetworkingEvent"
      | "partyOrSocialGathering"
      | "raceOrEnduranceEvent"
      | "rally"
      | "screening"
      | "seminarOrTalk"
      | "tour"
      | "tournament"
      | "tradeShowConsumerShowOrExpo"
      | "other";
    /**
     * @example music
     * @enum {string}
     */
    Category:
      | "autoBoatAndAir"
      | "businessAndProfessional"
      | "charityAndCauses"
      | "communityAndCulture"
      | "familyAndEducation"
      | "fashionAndBeauty"
      | "filmMediaAndEntertainment"
      | "foodAndDrink"
      | "governmentAndPolitics"
      | "healthAndWellness"
      | "hobbiesAndSpecialInterest"
      | "homeAndLifestyle"
      | "music"
      | "performingAndVisualArts"
      | "religionAndSpirituality"
      | "schoolActivities"
      | "scienceAndTechnology"
      | "seasonalAndHoliday"
      | "sportsAndFitness"
      | "travelAndOutdoor"
      | "other";
    /**
     * @example electronic
     * @enum {string}
     */
    Subcategory:
      | "air"
      | "auto"
      | "boat"
      | "motorcycle"
      | "other"
      | "career"
      | "design"
      | "educators"
      | "environmentAndSustainability"
      | "finance"
      | "investment"
      | "media"
      | "nonProfitNGO"
      | "realEstate"
      | "salesAndMarketing"
      | "startupsAndBusiness"
      | "animalWelfare"
      | "disasterRelief"
      | "education"
      | "environment"
      | "healthcare"
      | "humanRights"
      | "internationalAid"
      | "poverty"
      | "cityTown"
      | "county"
      | "heritage"
      | "historic"
      | "lgbt"
      | "language"
      | "medieval"
      | "nationality"
      | "renaissance"
      | "state"
      | "alumni"
      | "baby"
      | "childrenAndYouth"
      | "parenting"
      | "parentsAssociation"
      | "reunion"
      | "seniorCitizen"
      | "accessories"
      | "beauty"
      | "bridal"
      | "fashion"
      | "adult"
      | "anime"
      | "comedy"
      | "comics"
      | "film"
      | "gaming"
      | "tv"
      | "beer"
      | "food"
      | "spirits"
      | "wine"
      | "countyMunicipalGovernment"
      | "democraticParty"
      | "federalGovernment"
      | "internationalAffairs"
      | "military"
      | "nationalSecurity"
      | "nonPartisan"
      | "otherParty"
      | "republicanParty"
      | "stateGovernment"
      | "medical"
      | "mentalHealth"
      | "personalHealth"
      | "spa"
      | "yoga"
      | "animeComics"
      | "books"
      | "diy"
      | "drawingAndPainting"
      | "knitting"
      | "photography"
      | "dating"
      | "homeAndGarden"
      | "petsAndAnimals"
      | "acoustic"
      | "alternative"
      | "americana"
      | "bluegrass"
      | "blues"
      | "bluesAndJazz"
      | "classical"
      | "country"
      | "cultural"
      | "djDance"
      | "edm"
      | "edmElectronic"
      | "electronic"
      | "experimental"
      | "folk"
      | "hipHopRap"
      | "indie"
      | "jazz"
      | "latin"
      | "metal"
      | "opera"
      | "pop"
      | "psychedelic"
      | "punkHardcore"
      | "rAndB"
      | "reggae"
      | "religiousSpiritual"
      | "rock"
      | "singerSongwriter"
      | "top40"
      | "world"
      | "ballet"
      | "craft"
      | "fineArt"
      | "jewelry"
      | "literaryArts"
      | "musical"
      | "orchestra"
      | "painting"
      | "sculpture"
      | "theatre"
      | "agnosticism"
      | "atheism"
      | "buddhism"
      | "christianity"
      | "easternReligion"
      | "folkReligions"
      | "hinduism"
      | "islam"
      | "judaism"
      | "mormonism"
      | "mysticismAndOccult"
      | "newAge"
      | "shintoism"
      | "sikhism"
      | "unaffiliated"
      | "afterSchoolCare"
      | "dinner"
      | "fundRaiser"
      | "parking"
      | "publicSpeaker"
      | "raffle"
      | "biotech"
      | "highTech"
      | "medicine"
      | "mobile"
      | "robotics"
      | "science"
      | "socialMedia"
      | "autumnEvents"
      | "christmas"
      | "easter"
      | "halloweenHaunt"
      | "hanukkah"
      | "independenceDay"
      | "newYearsEve"
      | "stPatricksDay"
      | "thanksgiving"
      | "americanFootball"
      | "baseball"
      | "basketball"
      | "camps"
      | "cheer"
      | "cycling"
      | "exercise"
      | "fightingMartialArts"
      | "football"
      | "golf"
      | "hockey"
      | "lacrosse"
      | "motorsports"
      | "mountainBiking"
      | "obstacles"
      | "rugby"
      | "running"
      | "snowSports"
      | "softball"
      | "swimmingWaterSports"
      | "tennis"
      | "trackField"
      | "volleyball"
      | "walking"
      | "weightlifting"
      | "wrestling"
      | "canoeing"
      | "climbing"
      | "hiking"
      | "kayaking"
      | "rafting"
      | "travel";
    CategoryAutoBoatAndAir: {
      /** @enum {string} */
      category?: "autoBoatAndAir";
      /** @enum {string} */
      subcategory?: "air" | "auto" | "boat" | "motorcycle" | "other";
    };
    CategoryBusinessAndProfessional: {
      /** @enum {string} */
      category?: "businessAndProfessional";
      /** @enum {string} */
      subcategory?:
        | "career"
        | "design"
        | "educators"
        | "environmentAndSustainability"
        | "finance"
        | "investment"
        | "media"
        | "nonProfitNGO"
        | "realEstate"
        | "salesAndMarketing"
        | "startupsAndBusiness"
        | "other";
    };
    CategoryCharityAndCauses: {
      /** @enum {string} */
      category?: "charityAndCauses";
      /** @enum {string} */
      subcategory?:
        | "animalWelfare"
        | "disasterRelief"
        | "education"
        | "environment"
        | "healthcare"
        | "humanRights"
        | "internationalAid"
        | "poverty"
        | "other";
    };
    CategoryCommunityAndCulture: {
      /** @enum {string} */
      category?: "communityAndCulture";
      /** @enum {string} */
      subcategory?:
        | "cityTown"
        | "county"
        | "heritage"
        | "historic"
        | "lgbt"
        | "language"
        | "medieval"
        | "nationality"
        | "renaissance"
        | "state"
        | "other";
    };
    CategoryFamilyAndEducation: {
      /** @enum {string} */
      category?: "familyAndEducation";
      /** @enum {string} */
      subcategory?:
        | "alumni"
        | "baby"
        | "childrenAndYouth"
        | "education"
        | "parenting"
        | "parentsAssociation"
        | "reunion"
        | "seniorCitizen"
        | "other";
    };
    CategoryFashionAndBeauty: {
      /** @enum {string} */
      category?: "fashionAndBeauty";
      /** @enum {string} */
      subcategory?: "accessories" | "beauty" | "bridal" | "fashion" | "other";
    };
    CategoryFilmMediaAndEntertainment: {
      /** @enum {string} */
      category?: "filmMediaAndEntertainment";
      /** @enum {string} */
      subcategory?:
        | "adult"
        | "anime"
        | "comedy"
        | "comics"
        | "film"
        | "gaming"
        | "tv"
        | "other";
    };
    CategoryFoodAndDrink: {
      /** @enum {string} */
      category?: "foodAndDrink";
      /** @enum {string} */
      subcategory?: "beer" | "food" | "spirits" | "wine" | "other";
    };
    CategoryGovernmentAndPolitics: {
      /** @enum {string} */
      category?: "governmentAndPolitics";
      /** @enum {string} */
      subcategory?:
        | "countyMunicipalGovernment"
        | "democraticParty"
        | "federalGovernment"
        | "internationalAffairs"
        | "military"
        | "nationalSecurity"
        | "nonPartisan"
        | "otherParty"
        | "republicanParty"
        | "stateGovernment"
        | "other";
    };
    CategoryHealthAndWellness: {
      /** @enum {string} */
      category?: "healthAndWellness";
      /** @enum {string} */
      subcategory?:
        | "medical"
        | "mentalHealth"
        | "personalHealth"
        | "spa"
        | "yoga"
        | "other";
    };
    CategoryHobbiesAndSpecialInterest: {
      /** @enum {string} */
      category?: "hobbiesAndSpecialInterest";
      /** @enum {string} */
      subcategory?:
        | "adult"
        | "animeComics"
        | "books"
        | "diy"
        | "drawingAndPainting"
        | "gaming"
        | "knitting"
        | "photography"
        | "other";
    };
    CategoryHomeAndLifestyle: {
      /** @enum {string} */
      category?: "homeAndLifestyle";
      /** @enum {string} */
      subcategory?: "dating" | "homeAndGarden" | "petsAndAnimals" | "other";
    };
    CategoryMusic: {
      /** @enum {string} */
      category?: "music";
      /** @enum {string} */
      subcategory?:
        | "alternative"
        | "americana"
        | "bluegrass"
        | "blues"
        | "bluesAndJazz"
        | "classical"
        | "country"
        | "cultural"
        | "djDance"
        | "edm"
        | "edmElectronic"
        | "electronic"
        | "experimental"
        | "folk"
        | "hipHopRap"
        | "indie"
        | "jazz"
        | "latin"
        | "metal"
        | "opera"
        | "pop"
        | "psychedelic"
        | "punkHardcore"
        | "rAndB"
        | "reggae"
        | "religiousSpiritual"
        | "rock"
        | "singerSongwriter"
        | "top40"
        | "world"
        | "other";
    };
    CategoryPerformingAndVisualArts: {
      /** @enum {string} */
      category?: "performingAndVisualArts";
      /** @enum {string} */
      subcategory?:
        | "ballet"
        | "comedy"
        | "craft"
        | "dance"
        | "design"
        | "fineArt"
        | "jewelry"
        | "literaryArts"
        | "musical"
        | "opera"
        | "orchestra"
        | "painting"
        | "sculpture"
        | "theatre"
        | "other";
    };
    CategoryReligionAndSpirituality: {
      /** @enum {string} */
      category?: "religionAndSpirituality";
      /** @enum {string} */
      subcategory?:
        | "agnosticism"
        | "atheism"
        | "buddhism"
        | "christianity"
        | "easternReligion"
        | "folkReligions"
        | "hinduism"
        | "islam"
        | "judaism"
        | "mormonism"
        | "mysticismAndOccult"
        | "newAge"
        | "shintoism"
        | "sikhism"
        | "unaffiliated"
        | "other";
    };
    CategorySchoolActivities: {
      /** @enum {string} */
      category?: "schoolActivities";
      /** @enum {string} */
      subcategory?:
        | "afterSchoolCare"
        | "dinner"
        | "fundRaiser"
        | "parking"
        | "publicSpeaker"
        | "raffle"
        | "other";
    };
    CategoryScienceAndTechnology: {
      /** @enum {string} */
      category?: "scienceAndTechnology";
      /** @enum {string} */
      subcategory?:
        | "biotech"
        | "highTech"
        | "medicine"
        | "mobile"
        | "robotics"
        | "science"
        | "socialMedia"
        | "other";
    };
    CategorySeasonalAndHoliday: {
      /** @enum {string} */
      category?: "seasonalAndHoliday";
      /** @enum {string} */
      subcategory?:
        | "autumnEvents"
        | "christmas"
        | "easter"
        | "halloweenHaunt"
        | "hanukkah"
        | "independenceDay"
        | "newYearsEve"
        | "stPatricksDay"
        | "thanksgiving"
        | "other";
    };
    CategorySportsAndFitness: {
      /** @enum {string} */
      category?: "sportsAndFitness";
      /** @enum {string} */
      subcategory?:
        | "americanFootball"
        | "baseball"
        | "basketball"
        | "camps"
        | "cheer"
        | "cycling"
        | "exercise"
        | "fightingMartialArts"
        | "football"
        | "golf"
        | "hockey"
        | "lacrosse"
        | "motorsports"
        | "mountainBiking"
        | "obstacles"
        | "rugby"
        | "running"
        | "snowSports"
        | "softball"
        | "swimmingWaterSports"
        | "tennis"
        | "trackField"
        | "volleyball"
        | "walking"
        | "weightlifting"
        | "wrestling"
        | "yoga"
        | "other";
    };
    CategoryTravelAndOutdoor: {
      /** @enum {string} */
      category?: "travelAndOutdoor";
      /** @enum {string} */
      subcategory?:
        | "canoeing"
        | "climbing"
        | "hiking"
        | "kayaking"
        | "rafting"
        | "travel"
        | "other";
    };
    CategoryOther: {
      /** @enum {string} */
      category?: "other";
    };
    EventClassification: {
      type?: components["schemas"]["Type"];
    } & (
      | components["schemas"]["CategoryAutoBoatAndAir"]
      | components["schemas"]["CategoryBusinessAndProfessional"]
      | components["schemas"]["CategoryCharityAndCauses"]
      | components["schemas"]["CategoryCommunityAndCulture"]
      | components["schemas"]["CategoryFamilyAndEducation"]
      | components["schemas"]["CategoryFashionAndBeauty"]
      | components["schemas"]["CategoryFilmMediaAndEntertainment"]
      | components["schemas"]["CategoryFoodAndDrink"]
      | components["schemas"]["CategoryGovernmentAndPolitics"]
      | components["schemas"]["CategoryHealthAndWellness"]
      | components["schemas"]["CategoryHobbiesAndSpecialInterest"]
      | components["schemas"]["CategoryHomeAndLifestyle"]
      | components["schemas"]["CategoryMusic"]
      | components["schemas"]["CategoryPerformingAndVisualArts"]
      | components["schemas"]["CategoryReligionAndSpirituality"]
      | components["schemas"]["CategorySchoolActivities"]
      | components["schemas"]["CategoryScienceAndTechnology"]
      | components["schemas"]["CategorySeasonalAndHoliday"]
      | components["schemas"]["CategorySportsAndFitness"]
      | components["schemas"]["CategoryTravelAndOutdoor"]
      | components["schemas"]["CategoryOther"]
    );
    Accessibility: {
      /** @example Gandalf The Grey */
      contactName?: string;
      /** @example 0412345678 */
      contactNumber?: string;
      /** @example The closest drop off point is The Shires Rest. The best public transport option is... */
      travelInstructions?: string;
      /** @example To enter the building there is... */
      entryInstructions?: string;
      /** @example fter entering the building walk 10 meters forward than 3 meters right where you should introduce yourself to reception... */
      afterEntryInstructions?: string;
      /** @example NA */
      hazards?: string;
      /** @example Disabled toilets are located on ground level of the building only. */
      toiletLocation?: string;
      /** @example 5 spaces available in the Wilsons car park at 151 Example Street. */
      disabledParking?: string;
      features?: components["schemas"]["AccessibilityFeature"];
    };
    Artist: {
      /**
       * @description External system from which the artist information originates.
       * @example spotify
       */
      origin: string;
      /**
       * @description Name of the artist.
       * @example Gandalf
       */
      name: string;
      /**
       * @description Identifier used to reference the artist in the external system.
       * @example 4ZNG0WQPQ10ehIVkCnM5ku
       */
      externalId?: string;
    };
    AccessibilityFeature: {
      access?: boolean;
      wheelchairAccessibility?: boolean;
      audioDescription?: boolean;
      telephoneTypewriter?: boolean;
      volumeControlTelephone?: boolean;
      assistiveListeningSystems?: boolean;
      signLanguageInterpretation?: boolean;
      accessiblePrint?: boolean;
      closedCaptioning?: boolean;
      openedCaptioning?: boolean;
      brailleSymbol?: boolean;
    };
    SeatingLocationId: {
      /** @example b60f3c66-78bd-4c1a-a129-a55d98cfe62f */
      id?: string;
    };
    CheckIn: {
      checkedIn: boolean;
      date?: components["schemas"]["Date"];
      userId?: components["schemas"]["UserId"];
    };
    TicketSwap: {
      /** @example 5ac599d1a488620e6cd01d88 */
      id: string;
      swappedAt: components["schemas"]["Date"];
      userId: components["schemas"]["UserId"];
    };
    OrderTotals: {
      /** @example 50 */
      subtotal: number;
      amexFee?: number;
      zipFee?: number;
      /** @example 3.98 */
      humanitixFee?: number;
      /** @example 3.98 */
      bookingFee?: number;
      passedOnFee?: number;
      clientDonation: number;
      netClientDonation: number;
      /** @example 1.19 */
      donation: number;
      dgrDonation?: number;
      giftCardCredit?: number;
      credit?: number;
      /** @deprecated */
      outstandingAmount?: number;
      feesIncluded: boolean;
      /** @example 0.36 */
      bookingTaxes: number;
      passedOnTaxes?: number;
      /** @example 0 */
      taxes: number;
      /** @example 0.36 */
      totalTaxes: number;
      discounts: number;
      refunds: number;
      /** @example 50 */
      netSales: number;
      /** @example 53.98 */
      grossSales: number;
      referralAmount?: number;
      /** @example 53.98 */
      total: number;
    };
    TicketType: {
      _id?: components["schemas"]["TicketTypeId"];
      /** @example Adult */
      name: string;
      /** @example 100 */
      price?: number;
      priceRange?: {
        enabled?: boolean;
        /** @example 10 */
        min?: number;
        /** @example 100 */
        max?: number;
      };
      priceOptions?: {
        enabled?: boolean;
        options?: {
          /** @example 50 */
          value?: string;
        }[];
      };
      /** @example 500 */
      quantity?: number;
      /** @example Admits one hobbit. */
      description?: string;
      disabled?: boolean;
      deleted?: boolean;
      isDonation?: boolean;
    };
    Pricing: {
      /**
       * Format: double
       * @description Minimum ticket price on an event. If the event has free tickets, this will be 0.
       * @example 0
       */
      minimumPrice: number;
      /**
       * Format: double
       * @description Maximum ticket price on an event. If the event only has free tickets, this will be 0.
       * @example 123.45
       */
      maximumPrice: number;
    };
    EventLocation: {
      /** @enum {string} */
      type: "address" | "online" | "custom" | "toBeAnnounced";
      /** @example  */
      venueName?: string;
      /** @example 501 Buckland Road, Hinuera, Matamata 3472, New Zealand */
      address?: string;
      /** @example [
       *       -37.8691623,
       *       175.6802895
       *     ] */
      latLng?: number[];
      /** @example Take the guided tour departing from The Shires rest, 15 minutes from Matamata town centre by car. */
      instructions?: string;
      /** @example ChIJP0sTGs-uMioR7xB_WgdR9Bo */
      placeId?: string;
      /** @example www.zoom.com/hobbit-dance-off */
      onlineUrl?: string;
      /** @example https://cdn.filestackcontent.com/o5uJJsdJS8uH4PGcyBXx */
      mapUrl?: string;
      /**
       * @description The 'locality' from the Google geocoding api
       * @example Sydney
       */
      city?: string;
      /**
       * @description The 'administrative_area_level_1' from the Google geocoding api
       * @example NSW
       */
      region?: string;
      /**
       * @description The 'country' from the Google geocoding api. Format is that of ISO 3166-1 alpha-2 country codes.
       * @example AU
       */
      country?: string;
    };
    PaymentOptions: {
      refundSettings?: {
        /** @example Refunds are available 1 month prior to the event */
        refundPolicy?: string;
        /** @example In the event you are not able to attend the hobbit dance off due to unforeseen circumstances, The Shire Council needs to be advised in writing no later than 14 days prior to the event in order to receive a full refund.  If your cancellation is less than 14 days prior to the event you will be refunded the cost of the dance off less fireworks charges and a $25 administration fee. By booking you confirm that you are aware of our cancellation policy. */
        customRefundPolicy?: string;
      };
    };
    Image: {
      /** @example https://lh3.googleusercontent.com/proxy/IPr6keWrYy7JmdkUpFwyZB2Ev7OJg3oWLlqKlht7r5YGu2lPkEsiDUiHDkAbcrgLkh9zlPELDvQ-4Qa8F0hBYn2bjw3qlA5RvgwR-tW8ayfG1gfVrUxC6K3Oba0WR1g7cjh3D4eRQPkChlatag */
      url: string;
    };
    DateRange: {
      _id?: components["schemas"]["DateRangeId"];
      startDate: components["schemas"]["Date"];
      endDate: components["schemas"]["Date"];
      /** @example 5fb6ceea1b2dec000ab9d367 */
      scheduleId?: string;
      disabled?: boolean;
      deleted?: boolean;
    };
    /** @example Bilbo */
    FirstName: string;
    /** @example Baggins */
    LastName: string;
    /**
     * Format: email
     * @example bilbo.baggins@middleearth.com
     */
    Email: string;
    /** @example 0412345678 */
    Mobile: string;
    /**
     * @description The access code used on the order to reveal hidden tickets. If returned on the ticket object, this ticket was revealed by that access code.
     * @example EARLYACCESS
     */
    AccessCode: string;
    Discounts: {
      /** @description The automatic discount applied to an order or ticket. */
      autoDiscount?: {
        discountAmount?: components["schemas"]["DiscountAmount"];
      };
      /** @description The object for the discount code applied onto an order or ticket to apply a discount. */
      discountCode?: {
        code?: components["schemas"]["DiscountCode"];
        discountAmount?: components["schemas"]["DiscountAmount"];
      };
    };
    /**
     * @description The discount code applied onto an order or ticket to apply a discount.
     * @example FIFTYOFF
     */
    DiscountCode: string;
    /**
     * @description The discount amount applied to an order or ticket
     * @example 20
     */
    DiscountAmount: number;
    /** @enum {string} */
    Currency: "AUD" | "NZD" | "USD" | "FJD" | "CAD";
    /**
     * @description The channel through which the order or ticket was created, via an online sale or manual order.
     * @enum {string}
     */
    SalesChannel: "online" | "manual";
    QrCodeData: {
      _id: components["schemas"]["TicketId"];
      eventId: components["schemas"]["EventId"];
    };
    /**
     * @description The location of where the object is stored. Format is that of ISO 3166-1 alpha-2 country codes.
     * @example AU
     * @enum {string}
     */
    Location:
      | "AU"
      | "NZ"
      | "US"
      | "FJ"
      | "CA"
      | "GB"
      | "SG"
      | "DE"
      | "MY"
      | "MX";
    /**
     * Format: date-time
     * @example 2021-02-01T23:26:13.485Z
     */
    Date: string;
    /** @example Pacific/Auckland */
    Timezone: string;
    CheckInOutResult: {
      scanningMessages: {
        /** @example Test scan message */
        header: string;
        /** @example <p>My custom message</p> */
        message: string;
      }[];
    };
    /**
     * @description The total number of items matching your query.
     * @example 58
     */
    PaginationTotal: number;
    /** @description Page number you wish to fetch. */
    PaginationPage: number;
    /**
     * @description Page size of the results you wish to fetch.
     * @default 100
     */
    PaginationPageSize: number;
    PaginatedResponse: {
      total: components["schemas"]["PaginationTotal"];
      page: components["schemas"]["PaginationPage"];
      pageSize: components["schemas"]["PaginationPageSize"];
    };
  };
  responses: never;
  parameters: {
    /** @description ID of the event. */
    EventId: components["schemas"]["EventId"];
    /** @description ID of the order. */
    OrderId: components["schemas"]["OrderId"];
    /** @description ID of the ticket. */
    TicketId: components["schemas"]["TicketId"];
    /** @description ID of the tag. */
    TagId: components["schemas"]["TagId"];
    /** @description By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes. */
    OverrideLocation: string;
    /** @description ID of the event on a specific date. */
    EventDateId: components["schemas"]["EventDateId"];
    /** @description ID of the event on a specific date. */
    EventDateIdRequired: components["schemas"]["EventDateId"];
    /** @description Page number you wish to fetch. */
    Page: components["schemas"]["PaginationPage"];
    /** @description Page size of the results you wish to fetch. */
    PageSize: components["schemas"]["PaginationPageSize"];
    /** @description If true, return only events that have an endDate in the future. */
    InFutureOnly: boolean;
    /** @description If true, return only events that have artists. */
    WithArtistsOnly: boolean;
    /** @description Results since this date-time (ISO 8601). */
    Since: components["schemas"]["Date"];
    /** @description Filter events where "event.classification.type" matches this field. */
    Type: components["schemas"]["Type"];
    /** @description Filter events where "event.classification.category" matches this field. */
    Category: components["schemas"]["Category"];
    /** @description Filter events where "event.classification.subcategory" matches this field. If this parameter is provided, then "#/components/parameters/Category" must also be provided. */
    Subcategory: components["schemas"]["Subcategory"];
    /** @description Ticket status you wish to fetch. */
    Status: "complete" | "cancelled";
    /** @description The API key of the user who has permission to perform the requested action. */
    AccessApiKey: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
