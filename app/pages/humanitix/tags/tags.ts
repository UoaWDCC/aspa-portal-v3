/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Humanitix Public API
 * The Humanitix Public API for fetching event, order, ticket or tag information. Please note that in periods of low activity the first request you make may take a few seconds longer than normal.
 * OpenAPI spec version: 1.18.0
 */
import type {
  BadRequestError,
  GetV1Tags200,
  GetV1TagsParams,
  InternalServerError,
  NotFoundError,
  Tag,
  UnauthorizedError
} from '../humanitixPublicAPI.schemas';



export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;

/**
 * Returns all tags for a user.
 * @summary Get Tags
 */
export type getV1TagsResponse200 = {
  data: GetV1Tags200
  status: 200
}

export type getV1TagsResponse400 = {
  data: BadRequestError
  status: 400
}

export type getV1TagsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getV1TagsResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 400 | 401>
}
    
export type getV1TagsResponseComposite = getV1TagsResponse200 | getV1TagsResponse400 | getV1TagsResponse401 | getV1TagsResponseDefault;
    
export type getV1TagsResponse = getV1TagsResponseComposite & {
  headers: Headers;
}

export const getGetV1TagsUrl = (params: GetV1TagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/tags?${stringifiedParams}` : `/v1/tags`
}

export const getV1Tags = async (params: GetV1TagsParams, options?: RequestInit): Promise<getV1TagsResponse> => {
  
  const res = await fetch(getGetV1TagsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1TagsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1TagsResponse
}


/**
 * Returns a tag for the given tagId.
 * @summary Get Tag
 */
export type getV1TagsTagIdResponse200 = {
  data: Tag
  status: 200
}

export type getV1TagsTagIdResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getV1TagsTagIdResponse404 = {
  data: NotFoundError
  status: 404
}

export type getV1TagsTagIdResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 401 | 404>
}
    
export type getV1TagsTagIdResponseComposite = getV1TagsTagIdResponse200 | getV1TagsTagIdResponse401 | getV1TagsTagIdResponse404 | getV1TagsTagIdResponseDefault;
    
export type getV1TagsTagIdResponse = getV1TagsTagIdResponseComposite & {
  headers: Headers;
}

export const getGetV1TagsTagIdUrl = (tagId: string,) => {


  

  return `/v1/tags/${tagId}`
}

export const getV1TagsTagId = async (tagId: string, options?: RequestInit): Promise<getV1TagsTagIdResponse> => {
  
  const res = await fetch(getGetV1TagsTagIdUrl(tagId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1TagsTagIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1TagsTagIdResponse
}


