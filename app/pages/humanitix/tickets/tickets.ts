/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Humanitix Public API
 * The Humanitix Public API for fetching event, order, ticket or tag information. Please note that in periods of low activity the first request you make may take a few seconds longer than normal.
 * OpenAPI spec version: 1.18.0
 */
import type {
  BadRequestError,
  CheckInOutResult,
  ForbiddenError,
  GetV1EventsEventIdTickets200,
  GetV1EventsEventIdTicketsParams,
  GetV1EventsEventIdTicketsTicketIdParams,
  InternalServerError,
  NotFoundError,
  PostV1EventsEventIdTicketsTicketIdCheckInParams,
  PostV1EventsEventIdTicketsTicketIdCheckOutParams,
  Ticket,
  TransferTicketRequest,
  TransferTicketResult,
  UnauthorizedError,
  UnprocessableEntityError
} from '../humanitixPublicAPI.schemas';



export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;

/**
 * Returns all tickets for an event.
 * @summary Get Tickets
 */
export type getV1EventsEventIdTicketsResponse200 = {
  data: GetV1EventsEventIdTickets200
  status: 200
}
    
export type getV1EventsEventIdTicketsResponseComposite = getV1EventsEventIdTicketsResponse200;
    
export type getV1EventsEventIdTicketsResponse = getV1EventsEventIdTicketsResponseComposite & {
  headers: Headers;
}

export const getGetV1EventsEventIdTicketsUrl = (eventId: string,
    params: GetV1EventsEventIdTicketsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events/${eventId}/tickets?${stringifiedParams}` : `/v1/events/${eventId}/tickets`
}

export const getV1EventsEventIdTickets = async (eventId: string,
    params: GetV1EventsEventIdTicketsParams, options?: RequestInit): Promise<getV1EventsEventIdTicketsResponse> => {
  
  const res = await fetch(getGetV1EventsEventIdTicketsUrl(eventId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1EventsEventIdTicketsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1EventsEventIdTicketsResponse
}


/**
 * Returns a ticket for the given eventId and ticketId.
 * @summary Get Ticket
 */
export type getV1EventsEventIdTicketsTicketIdResponse200 = {
  data: Ticket
  status: 200
}

export type getV1EventsEventIdTicketsTicketIdResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getV1EventsEventIdTicketsTicketIdResponse404 = {
  data: NotFoundError
  status: 404
}

export type getV1EventsEventIdTicketsTicketIdResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 401 | 404>
}
    
export type getV1EventsEventIdTicketsTicketIdResponseComposite = getV1EventsEventIdTicketsTicketIdResponse200 | getV1EventsEventIdTicketsTicketIdResponse401 | getV1EventsEventIdTicketsTicketIdResponse404 | getV1EventsEventIdTicketsTicketIdResponseDefault;
    
export type getV1EventsEventIdTicketsTicketIdResponse = getV1EventsEventIdTicketsTicketIdResponseComposite & {
  headers: Headers;
}

export const getGetV1EventsEventIdTicketsTicketIdUrl = (eventId: string,
    ticketId: string,
    params?: GetV1EventsEventIdTicketsTicketIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events/${eventId}/tickets/${ticketId}?${stringifiedParams}` : `/v1/events/${eventId}/tickets/${ticketId}`
}

export const getV1EventsEventIdTicketsTicketId = async (eventId: string,
    ticketId: string,
    params?: GetV1EventsEventIdTicketsTicketIdParams, options?: RequestInit): Promise<getV1EventsEventIdTicketsTicketIdResponse> => {
  
  const res = await fetch(getGetV1EventsEventIdTicketsTicketIdUrl(eventId,ticketId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1EventsEventIdTicketsTicketIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1EventsEventIdTicketsTicketIdResponse
}


/**
 * Transfers a ticket from one person to another. Requires special user permission to use this endpoint, activated by Humanitix.
 * @summary Transfer Ticket
 */
export type postV1EventsEventIdTicketsTicketIdTransferResponse200 = {
  data: TransferTicketResult
  status: 200
}

export type postV1EventsEventIdTicketsTicketIdTransferResponse400 = {
  data: BadRequestError
  status: 400
}

export type postV1EventsEventIdTicketsTicketIdTransferResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type postV1EventsEventIdTicketsTicketIdTransferResponse403 = {
  data: ForbiddenError
  status: 403
}

export type postV1EventsEventIdTicketsTicketIdTransferResponse404 = {
  data: NotFoundError
  status: 404
}

export type postV1EventsEventIdTicketsTicketIdTransferResponse422 = {
  data: UnprocessableEntityError
  status: 422
}

export type postV1EventsEventIdTicketsTicketIdTransferResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 400 | 401 | 403 | 404 | 422>
}
    
export type postV1EventsEventIdTicketsTicketIdTransferResponseComposite = postV1EventsEventIdTicketsTicketIdTransferResponse200 | postV1EventsEventIdTicketsTicketIdTransferResponse400 | postV1EventsEventIdTicketsTicketIdTransferResponse401 | postV1EventsEventIdTicketsTicketIdTransferResponse403 | postV1EventsEventIdTicketsTicketIdTransferResponse404 | postV1EventsEventIdTicketsTicketIdTransferResponse422 | postV1EventsEventIdTicketsTicketIdTransferResponseDefault;
    
export type postV1EventsEventIdTicketsTicketIdTransferResponse = postV1EventsEventIdTicketsTicketIdTransferResponseComposite & {
  headers: Headers;
}

export const getPostV1EventsEventIdTicketsTicketIdTransferUrl = (eventId: string,
    ticketId: string,) => {


  

  return `/v1/events/${eventId}/tickets/${ticketId}/transfer`
}

export const postV1EventsEventIdTicketsTicketIdTransfer = async (eventId: string,
    ticketId: string,
    transferTicketRequest: TransferTicketRequest, options?: RequestInit): Promise<postV1EventsEventIdTicketsTicketIdTransferResponse> => {
  
  const res = await fetch(getPostV1EventsEventIdTicketsTicketIdTransferUrl(eventId,ticketId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      transferTicketRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postV1EventsEventIdTicketsTicketIdTransferResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postV1EventsEventIdTicketsTicketIdTransferResponse
}


/**
 * Update the ticket to check it in
 * @summary Check in
 */
export type postV1EventsEventIdTicketsTicketIdCheckInResponse200 = {
  data: CheckInOutResult
  status: 200
}

export type postV1EventsEventIdTicketsTicketIdCheckInResponse400 = {
  data: BadRequestError
  status: 400
}

export type postV1EventsEventIdTicketsTicketIdCheckInResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type postV1EventsEventIdTicketsTicketIdCheckInResponse403 = {
  data: ForbiddenError
  status: 403
}

export type postV1EventsEventIdTicketsTicketIdCheckInResponse404 = {
  data: NotFoundError
  status: 404
}

export type postV1EventsEventIdTicketsTicketIdCheckInResponse422 = {
  data: UnprocessableEntityError
  status: 422
}

export type postV1EventsEventIdTicketsTicketIdCheckInResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 400 | 401 | 403 | 404 | 422>
}
    
export type postV1EventsEventIdTicketsTicketIdCheckInResponseComposite = postV1EventsEventIdTicketsTicketIdCheckInResponse200 | postV1EventsEventIdTicketsTicketIdCheckInResponse400 | postV1EventsEventIdTicketsTicketIdCheckInResponse401 | postV1EventsEventIdTicketsTicketIdCheckInResponse403 | postV1EventsEventIdTicketsTicketIdCheckInResponse404 | postV1EventsEventIdTicketsTicketIdCheckInResponse422 | postV1EventsEventIdTicketsTicketIdCheckInResponseDefault;
    
export type postV1EventsEventIdTicketsTicketIdCheckInResponse = postV1EventsEventIdTicketsTicketIdCheckInResponseComposite & {
  headers: Headers;
}

export const getPostV1EventsEventIdTicketsTicketIdCheckInUrl = (eventId: string,
    ticketId: string,
    params?: PostV1EventsEventIdTicketsTicketIdCheckInParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events/${eventId}/tickets/${ticketId}/check-in?${stringifiedParams}` : `/v1/events/${eventId}/tickets/${ticketId}/check-in`
}

export const postV1EventsEventIdTicketsTicketIdCheckIn = async (eventId: string,
    ticketId: string,
    params?: PostV1EventsEventIdTicketsTicketIdCheckInParams, options?: RequestInit): Promise<postV1EventsEventIdTicketsTicketIdCheckInResponse> => {
  
  const res = await fetch(getPostV1EventsEventIdTicketsTicketIdCheckInUrl(eventId,ticketId,params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postV1EventsEventIdTicketsTicketIdCheckInResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postV1EventsEventIdTicketsTicketIdCheckInResponse
}


/**
 * Update the ticket to check it out
 * @summary Check out
 */
export type postV1EventsEventIdTicketsTicketIdCheckOutResponse200 = {
  data: CheckInOutResult
  status: 200
}

export type postV1EventsEventIdTicketsTicketIdCheckOutResponse400 = {
  data: BadRequestError
  status: 400
}

export type postV1EventsEventIdTicketsTicketIdCheckOutResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type postV1EventsEventIdTicketsTicketIdCheckOutResponse403 = {
  data: ForbiddenError
  status: 403
}

export type postV1EventsEventIdTicketsTicketIdCheckOutResponse404 = {
  data: NotFoundError
  status: 404
}

export type postV1EventsEventIdTicketsTicketIdCheckOutResponse422 = {
  data: UnprocessableEntityError
  status: 422
}

export type postV1EventsEventIdTicketsTicketIdCheckOutResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 400 | 401 | 403 | 404 | 422>
}
    
export type postV1EventsEventIdTicketsTicketIdCheckOutResponseComposite = postV1EventsEventIdTicketsTicketIdCheckOutResponse200 | postV1EventsEventIdTicketsTicketIdCheckOutResponse400 | postV1EventsEventIdTicketsTicketIdCheckOutResponse401 | postV1EventsEventIdTicketsTicketIdCheckOutResponse403 | postV1EventsEventIdTicketsTicketIdCheckOutResponse404 | postV1EventsEventIdTicketsTicketIdCheckOutResponse422 | postV1EventsEventIdTicketsTicketIdCheckOutResponseDefault;
    
export type postV1EventsEventIdTicketsTicketIdCheckOutResponse = postV1EventsEventIdTicketsTicketIdCheckOutResponseComposite & {
  headers: Headers;
}

export const getPostV1EventsEventIdTicketsTicketIdCheckOutUrl = (eventId: string,
    ticketId: string,
    params?: PostV1EventsEventIdTicketsTicketIdCheckOutParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events/${eventId}/tickets/${ticketId}/check-out?${stringifiedParams}` : `/v1/events/${eventId}/tickets/${ticketId}/check-out`
}

export const postV1EventsEventIdTicketsTicketIdCheckOut = async (eventId: string,
    ticketId: string,
    params?: PostV1EventsEventIdTicketsTicketIdCheckOutParams, options?: RequestInit): Promise<postV1EventsEventIdTicketsTicketIdCheckOutResponse> => {
  
  const res = await fetch(getPostV1EventsEventIdTicketsTicketIdCheckOutUrl(eventId,ticketId,params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postV1EventsEventIdTicketsTicketIdCheckOutResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postV1EventsEventIdTicketsTicketIdCheckOutResponse
}


