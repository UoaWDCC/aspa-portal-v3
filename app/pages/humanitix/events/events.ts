/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Humanitix Public API
 * The Humanitix Public API for fetching event, order, ticket or tag information. Please note that in periods of low activity the first request you make may take a few seconds longer than normal.
 * OpenAPI spec version: 1.18.0
 */
import type {
  BadRequestError,
  CheckInCountResult,
  CreateEventRequest,
  Event,
  ForbiddenError,
  GetV1Events200,
  GetV1EventsEventIdCheckInCountParams,
  GetV1EventsEventIdParams,
  GetV1EventsParams,
  InternalServerError,
  NotFoundError,
  PatchV1EventsEventIdParams,
  PostV1EventsParams,
  UnauthorizedError,
  UpdateEventRequest
} from '../humanitixPublicAPI.schemas';



export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;

/**
 * Returns an array of events.
 * @summary Get Events
 */
export type getV1EventsResponse200 = {
  data: GetV1Events200
  status: 200
}

export type getV1EventsResponse400 = {
  data: BadRequestError
  status: 400
}

export type getV1EventsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getV1EventsResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 400 | 401>
}
    
export type getV1EventsResponseComposite = getV1EventsResponse200 | getV1EventsResponse400 | getV1EventsResponse401 | getV1EventsResponseDefault;
    
export type getV1EventsResponse = getV1EventsResponseComposite & {
  headers: Headers;
}

export const getGetV1EventsUrl = (params: GetV1EventsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events?${stringifiedParams}` : `/v1/events`
}

export const getV1Events = async (params: GetV1EventsParams, options?: RequestInit): Promise<getV1EventsResponse> => {
  
  const res = await fetch(getGetV1EventsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1EventsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1EventsResponse
}


/**
 * Create a base event. Requires special user permission to use this endpoint, activated by Humanitix.
 * @summary Create Event
 */
export type postV1EventsResponse200 = {
  data: Event
  status: 200
}

export type postV1EventsResponse400 = {
  data: BadRequestError
  status: 400
}

export type postV1EventsResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type postV1EventsResponse403 = {
  data: ForbiddenError
  status: 403
}

export type postV1EventsResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 400 | 401 | 403>
}
    
export type postV1EventsResponseComposite = postV1EventsResponse200 | postV1EventsResponse400 | postV1EventsResponse401 | postV1EventsResponse403 | postV1EventsResponseDefault;
    
export type postV1EventsResponse = postV1EventsResponseComposite & {
  headers: Headers;
}

export const getPostV1EventsUrl = (params?: PostV1EventsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events?${stringifiedParams}` : `/v1/events`
}

export const postV1Events = async (createEventRequest: CreateEventRequest,
    params?: PostV1EventsParams, options?: RequestInit): Promise<postV1EventsResponse> => {
  
  const res = await fetch(getPostV1EventsUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createEventRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postV1EventsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postV1EventsResponse
}


/**
 * Returns an event for the given eventId.
 * @summary Get Event
 */
export type getV1EventsEventIdResponse200 = {
  data: Event
  status: 200
}

export type getV1EventsEventIdResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getV1EventsEventIdResponse404 = {
  data: NotFoundError
  status: 404
}

export type getV1EventsEventIdResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 401 | 404>
}
    
export type getV1EventsEventIdResponseComposite = getV1EventsEventIdResponse200 | getV1EventsEventIdResponse401 | getV1EventsEventIdResponse404 | getV1EventsEventIdResponseDefault;
    
export type getV1EventsEventIdResponse = getV1EventsEventIdResponseComposite & {
  headers: Headers;
}

export const getGetV1EventsEventIdUrl = (eventId: string,
    params?: GetV1EventsEventIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events/${eventId}?${stringifiedParams}` : `/v1/events/${eventId}`
}

export const getV1EventsEventId = async (eventId: string,
    params?: GetV1EventsEventIdParams, options?: RequestInit): Promise<getV1EventsEventIdResponse> => {
  
  const res = await fetch(getGetV1EventsEventIdUrl(eventId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1EventsEventIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1EventsEventIdResponse
}


/**
 * Update an event
 * @summary Update Event. Requires special user permission to use this endpoint, activated by Humanitix.
 */
export type patchV1EventsEventIdResponse200 = {
  data: Event
  status: 200
}

export type patchV1EventsEventIdResponse400 = {
  data: BadRequestError
  status: 400
}

export type patchV1EventsEventIdResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type patchV1EventsEventIdResponse403 = {
  data: ForbiddenError
  status: 403
}

export type patchV1EventsEventIdResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 400 | 401 | 403>
}
    
export type patchV1EventsEventIdResponseComposite = patchV1EventsEventIdResponse200 | patchV1EventsEventIdResponse400 | patchV1EventsEventIdResponse401 | patchV1EventsEventIdResponse403 | patchV1EventsEventIdResponseDefault;
    
export type patchV1EventsEventIdResponse = patchV1EventsEventIdResponseComposite & {
  headers: Headers;
}

export const getPatchV1EventsEventIdUrl = (eventId: string,
    params?: PatchV1EventsEventIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events/${eventId}?${stringifiedParams}` : `/v1/events/${eventId}`
}

export const patchV1EventsEventId = async (eventId: string,
    updateEventRequest: UpdateEventRequest,
    params?: PatchV1EventsEventIdParams, options?: RequestInit): Promise<patchV1EventsEventIdResponse> => {
  
  const res = await fetch(getPatchV1EventsEventIdUrl(eventId,params),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateEventRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: patchV1EventsEventIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as patchV1EventsEventIdResponse
}


/**
 * Returns a check in count object for a given eventId and eventDateId for all tickets that have had sales (this endpoint is in Beta and is subject to change).
 * @summary Get Event check in count (BETA)
 */
export type getV1EventsEventIdCheckInCountResponse200 = {
  data: CheckInCountResult
  status: 200
}

export type getV1EventsEventIdCheckInCountResponse401 = {
  data: UnauthorizedError
  status: 401
}

export type getV1EventsEventIdCheckInCountResponse404 = {
  data: NotFoundError
  status: 404
}

export type getV1EventsEventIdCheckInCountResponseDefault = {
  data: InternalServerError
  status: Exclude<HTTPStatusCodes, 200 | 401 | 404>
}
    
export type getV1EventsEventIdCheckInCountResponseComposite = getV1EventsEventIdCheckInCountResponse200 | getV1EventsEventIdCheckInCountResponse401 | getV1EventsEventIdCheckInCountResponse404 | getV1EventsEventIdCheckInCountResponseDefault;
    
export type getV1EventsEventIdCheckInCountResponse = getV1EventsEventIdCheckInCountResponseComposite & {
  headers: Headers;
}

export const getGetV1EventsEventIdCheckInCountUrl = (eventId: string,
    params: GetV1EventsEventIdCheckInCountParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/v1/events/${eventId}/check-in-count?${stringifiedParams}` : `/v1/events/${eventId}/check-in-count`
}

export const getV1EventsEventIdCheckInCount = async (eventId: string,
    params: GetV1EventsEventIdCheckInCountParams, options?: RequestInit): Promise<getV1EventsEventIdCheckInCountResponse> => {
  
  const res = await fetch(getGetV1EventsEventIdCheckInCountUrl(eventId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getV1EventsEventIdCheckInCountResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getV1EventsEventIdCheckInCountResponse
}


