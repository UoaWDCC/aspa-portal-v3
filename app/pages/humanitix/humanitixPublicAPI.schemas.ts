/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Humanitix Public API
 * The Humanitix Public API for fetching event, order, ticket or tag information. Please note that in periods of low activity the first request you make may take a few seconds longer than normal.
 * OpenAPI spec version: 1.18.0
 */
export type EventAffiliateCode = {
  code: string;
};

export interface Event {
  _id: EventId;
  userId: UserId;
  organiserId?: OrganiserId;
  currency: Currency;
  name: string;
  description: string;
  slug: string;
  url?: string;
  tagIds?: string[];
  category?: string;
  classification?: EventClassification;
  artists?: Artist[];
  public: boolean;
  published: boolean;
  suspendSales?: boolean;
  markedAsSoldOut?: boolean;
  startDate?: Date;
  endDate?: Date;
  timezone: Timezone;
  totalCapacity: number;
  ticketTypes?: TicketType[];
  pricing?: Pricing;
  paymentOptions?: PaymentOptions;
  publishedAt?: Date;
  additionalQuestions?: AdditionalQuestions[];
  bannerImage?: Image;
  featureImage?: Image;
  socialImage?: Image;
  eventLocation?: EventLocation;
  dates?: DateRange[];
  packagedTickets?: PackagedTickets[];
  accessibility?: Accessibility;
  affiliateCode?: EventAffiliateCode;
  keywords?: string[];
  location: Location;
  createdAt: Date;
  updatedAt: Date;
}

export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderStatus = {
  complete: 'complete',
} as const;

export type OrderFinancialStatus = typeof OrderFinancialStatus[keyof typeof OrderFinancialStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderFinancialStatus = {
  free: 'free',
  paid: 'paid',
  partiallyRefunded: 'partiallyRefunded',
  refunded: 'refunded',
} as const;

export type OrderPaymentType = typeof OrderPaymentType[keyof typeof OrderPaymentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderPaymentType = {
  cash: 'cash',
  complimentary: 'complimentary',
  voucher: 'voucher',
  bankDeposit: 'bankDeposit',
  eftpos: 'eftpos',
  payPal: 'payPal',
  noPaymentNecessary: 'noPaymentNecessary',
  other: 'other',
} as const;

export type OrderPaymentGateway = typeof OrderPaymentGateway[keyof typeof OrderPaymentGateway];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrderPaymentGateway = {
  manual: 'manual',
  'gift-card': 'gift-card',
  credit: 'credit',
  'discover-nsw': 'discover-nsw',
  invoice: 'invoice',
  paypal: 'paypal',
  bpoint: 'bpoint',
  afterpay: 'afterpay',
  zipmoney: 'zipmoney',
  'stripe-payments': 'stripe-payments',
  stripe: 'stripe',
  worldpay: 'worldpay',
  till: 'till',
  tillTerminal: 'tillTerminal',
  pin: 'pin',
  braintree: 'braintree',
  cash: 'cash',
} as const;

export interface Order {
  _id: OrderId;
  eventId?: EventId;
  userId?: UserId;
  currency: Currency;
  eventDateId?: EventDateId;
  status: OrderStatus;
  financialStatus: OrderFinancialStatus;
  firstName?: FirstName;
  lastName?: LastName;
  organisation?: string;
  mobile?: Mobile;
  email?: Email;
  accessCode?: AccessCode;
  discounts?: Discounts;
  businessPurpose?: boolean;
  businessTaxId?: string;
  businessName?: string;
  paymentType?: OrderPaymentType;
  paymentGateway?: OrderPaymentGateway;
  manualOrder: boolean;
  tipFees?: boolean;
  clientDonation?: number;
  notes?: string;
  organiserMailListOptIn?: boolean;
  incompleteAt?: Date;
  completedAt?: Date;
  waitlistOfferId?: string;
  isInternationalTransaction?: boolean;
  totals?: OrderTotals;
  purchaseTotals?: OrderTotals;
  additionalFields?: AdditionalFields[];
  salesChannel: SalesChannel;
  location: Location;
  createdAt: Date;
  updatedAt: Date;
}

export type TicketSeatingLocation = {
  seatingMapId?: string;
  name?: string;
  section?: SeatingLocationId;
  table?: SeatingLocationId;
  seat?: SeatingLocationId;
  note?: string;
};

export type TicketStatus = typeof TicketStatus[keyof typeof TicketStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TicketStatus = {
  complete: 'complete',
  cancelled: 'cancelled',
} as const;

export interface Ticket {
  _id: TicketId;
  eventId: EventId;
  orderId: OrderId;
  orderName: OrderName;
  currency: Currency;
  number?: number;
  firstName?: FirstName;
  lastName?: LastName;
  organisation?: string;
  eventDateId: EventDateId;
  ticketTypeName: TicketTypeName;
  ticketTypeId: TicketTypeId;
  accessCode?: AccessCode;
  price?: number;
  discount: number;
  netPrice: number;
  taxes: number;
  fee: number;
  passedOnFee?: number;
  absorbedFee?: number;
  dgrDonation?: number;
  total?: number;
  customScanningCode?: string;
  seatingLocation?: TicketSeatingLocation;
  status: TicketStatus;
  additionalFields?: AdditionalFields[];
  checkIn?: CheckIn;
  checkInHistory?: CheckIn[];
  cancelledAt?: Date;
  isDonation?: boolean;
  packageId?: string;
  packageName?: string;
  packageGroupId?: string;
  packagePrice?: number;
  attendeeProfileId?: string;
  swappedFrom?: TicketSwap;
  swappedTo?: TicketSwap;
  salesChannel: SalesChannel;
  qrCodeData: QrCodeData;
  discounts?: Discounts;
  location: Location;
  createdAt: Date;
  updatedAt: Date;
}

export interface SharedEventRequestForCreateAndWrite {
  /** @minLength 1 */
  name?: string;
  description?: string;
  timezone?: Timezone;
  eventLocation?: CreateUpdateEventLocation;
  /** @maxItems 10 */
  keywords?: string[];
  classification?: EventClassification;
}

export type CreateEventRequestAllOf = {
  /**
   * @minItems 1
   * @maxItems 700
   */
  dates: CreateDateRange[];
};

export type CreateEventRequest = SharedEventRequestForCreateAndWrite & CreateEventRequestAllOf & Required<Pick<SharedEventRequestForCreateAndWrite & CreateEventRequestAllOf, 'name' | 'timezone'>>;

export type UpdateEventRequestAllOf = {
  /**
   * @minItems 1
   * @maxItems 700
   */
  dates?: DateOperation[];
  location?: Location;
};

export type UpdateEventRequest = SharedEventRequestForCreateAndWrite & UpdateEventRequestAllOf;

export interface CreateDateRange {
  startDate: Date;
  endDate: Date;
}

export type DateOperation = CreateDateOperation | UpdateDateOperation | DeleteDateOperation;

export type CreateDateOperationOperation = typeof CreateDateOperationOperation[keyof typeof CreateDateOperationOperation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDateOperationOperation = {
  CREATE: 'CREATE',
} as const;

export interface CreateDateOperation {
  startDate: Date;
  endDate: Date;
  operation: CreateDateOperationOperation;
}

export type UpdateDateOperationOperation = typeof UpdateDateOperationOperation[keyof typeof UpdateDateOperationOperation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateDateOperationOperation = {
  UPDATE: 'UPDATE',
} as const;

export interface UpdateDateOperation {
  _id: DateRangeId;
  startDate: Date;
  endDate: Date;
  operation: UpdateDateOperationOperation;
}

export type DeleteDateOperationOperation = typeof DeleteDateOperationOperation[keyof typeof DeleteDateOperationOperation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteDateOperationOperation = {
  DELETE: 'DELETE',
} as const;

export interface DeleteDateOperation {
  _id: DateRangeId;
  operation: DeleteDateOperationOperation;
}

export type CreateUpdateEventLocation = CreateOnlineEventLocation | CreateAddressEventLocation | CreateCustomEventLocation | CreateToBeAnnouncedEventLocation;

export type CreateToBeAnnouncedEventLocationType = typeof CreateToBeAnnouncedEventLocationType[keyof typeof CreateToBeAnnouncedEventLocationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateToBeAnnouncedEventLocationType = {
  toBeAnnounced: 'toBeAnnounced',
} as const;

export interface CreateToBeAnnouncedEventLocation {
  type: CreateToBeAnnouncedEventLocationType;
}

export type CreateOnlineEventLocationType = typeof CreateOnlineEventLocationType[keyof typeof CreateOnlineEventLocationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateOnlineEventLocationType = {
  online: 'online',
} as const;

export interface CreateOnlineEventLocation {
  type: CreateOnlineEventLocationType;
  onlineUrl?: string;
  instructions?: string;
}

export type CreateAddressEventLocationType = typeof CreateAddressEventLocationType[keyof typeof CreateAddressEventLocationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateAddressEventLocationType = {
  address: 'address',
} as const;

export interface CreateAddressEventLocation {
  type: CreateAddressEventLocationType;
  address: string;
  venueName: string;
  /**
   * @minItems 2
   * @maxItems 2
   */
  latLng: number[];
  /** See https://developers.google.com/maps/documentation/places/web-service/details#Place-place_id */
  placeId?: string;
  addressComponents?: CreateGoogleAddressComponents[];
}

export type CreateCustomEventLocationType = typeof CreateCustomEventLocationType[keyof typeof CreateCustomEventLocationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateCustomEventLocationType = {
  custom: 'custom',
} as const;

export interface CreateCustomEventLocation {
  type: CreateCustomEventLocationType;
  /** @minLength 1 */
  address: string;
  /** @minLength 1 */
  venueName: string;
}

/**
 * See https://developers.google.com/maps/documentation/places/web-service/details#AddressComponent
 */
export interface CreateGoogleAddressComponents {
  long_name?: string;
  short_name?: string;
  types?: string[];
}

export interface TransferTicketRequest {
  firstName: FirstName;
  lastName: LastName;
  email: Email;
  mobile: Mobile;
}

export type TransferTicketResultAllOf = {
  /** Describes whether the order has any unanswered required questions after swapping. Use 'orderEditLink' to answer these questions. */
  orderHasUnansweredRequiredQuestions: boolean;
  /** The URL where the order this ticket is part of can be edited. Use this to answer any unanswered required questions (use the 'orderHasUnansweredRequiredQuestions' field to know if there are any). */
  orderEditLink: string;
};

export type TransferTicketResult = Ticket & TransferTicketResultAllOf;

export interface Tag {
  _id: TagId;
  /** The name of the tag. */
  name: string;
  /** The userId of the user that this tag belongs to. */
  userId: string;
  location: Location;
  createdAt?: Date;
  updatedAt?: Date;
}

export type CheckInCountResultTicketTypesItem = {
  ticketTypeId: TicketTypeId;
  ticketTypeName: TicketTypeName;
  checkedIn: number;
};

export interface CheckInCountResult {
  eventId: EventId;
  eventDateId: EventDateId;
  /** The number of check ins across all ticket types. */
  checkedIn: number;
  ticketTypes: CheckInCountResultTicketTypesItem[];
}

export interface Error {
  statusCode: number;
  error: string;
  message: string;
}

export type BadRequestErrorAllOf = {
  statusCode?: unknown;
  error?: unknown;
  message?: unknown;
};

export type BadRequestError = Error & BadRequestErrorAllOf;

export type UnauthorizedErrorAllOf = {
  statusCode?: unknown;
  error?: unknown;
  message?: unknown;
};

export type UnauthorizedError = Error & UnauthorizedErrorAllOf;

export type ForbiddenErrorAllOf = {
  statusCode?: unknown;
  error?: unknown;
  message?: unknown;
};

export type ForbiddenError = Error & ForbiddenErrorAllOf;

export type NotFoundErrorAllOf = {
  statusCode?: unknown;
  error?: unknown;
  message?: unknown;
};

export type NotFoundError = Error & NotFoundErrorAllOf;

export type UnprocessableEntityErrorAllOf = {
  statusCode?: unknown;
  error?: unknown;
  message?: unknown;
};

export type UnprocessableEntityError = Error & UnprocessableEntityErrorAllOf;

export type InternalServerErrorAllOf = {
  statusCode?: unknown;
  error?: unknown;
  message?: unknown;
};

/**
 * Internal Server Error
 */
export type InternalServerError = Error & InternalServerErrorAllOf;

export type UserId = string;

export type EventId = string;

export type OrderId = string;

export type TicketId = string;

export type TagId = string;

export type EventDateId = string;

export type OrganiserId = string;

export type DateRangeId = string;

export type TicketTypeId = string;

export type PackagedTicketsId = string;

export type TicketTypeName = string;

export type OrderName = string;

export type AdditionalQuestionId = string;

export type AdditionalQuestionsInputType = typeof AdditionalQuestionsInputType[keyof typeof AdditionalQuestionsInputType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AdditionalQuestionsInputType = {
  text: 'text',
  number: 'number',
  email: 'email',
  url: 'url',
  date: 'date',
  file: 'file',
} as const;

export interface AdditionalQuestions {
  _id: AdditionalQuestionId;
  inputType?: AdditionalQuestionsInputType;
  question: string;
  required: boolean;
  description?: string;
  perOrder: boolean;
  disabled?: boolean;
  createdAt?: Date;
  updatedAt?: Date;
}

export type AdditionalFieldsDetails = {
  street?: string;
  suburb?: string;
  postalCode?: string;
  city?: string;
  state?: string;
  country?: string;
};

export interface AdditionalFields {
  questionId: AdditionalQuestionId;
  value: string;
  details?: AdditionalFieldsDetails;
}

export type PackagedTicketsTicketsItem = {
  ticketTypeId: TicketTypeId;
  quantity: number;
};

export interface PackagedTickets {
  _id?: PackagedTicketsId;
  name?: string;
  price?: number;
  quantity?: number;
  description?: string;
  disabled?: boolean;
  deleted?: boolean;
  tickets?: PackagedTicketsTicketsItem[];
}

export type Type = typeof Type[keyof typeof Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Type = {
  appearanceOrSigning: 'appearanceOrSigning',
  attraction: 'attraction',
  campTripOrRetreat: 'campTripOrRetreat',
  classTrainingOrWorkshop: 'classTrainingOrWorkshop',
  concertOrPerformance: 'concertOrPerformance',
  conference: 'conference',
  convention: 'convention',
  dinnerOrGala: 'dinnerOrGala',
  festivalOrFair: 'festivalOrFair',
  gameOrCompetition: 'gameOrCompetition',
  meetingOrNetworkingEvent: 'meetingOrNetworkingEvent',
  partyOrSocialGathering: 'partyOrSocialGathering',
  raceOrEnduranceEvent: 'raceOrEnduranceEvent',
  rally: 'rally',
  screening: 'screening',
  seminarOrTalk: 'seminarOrTalk',
  tour: 'tour',
  tournament: 'tournament',
  tradeShowConsumerShowOrExpo: 'tradeShowConsumerShowOrExpo',
  other: 'other',
} as const;

export type Category = typeof Category[keyof typeof Category];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Category = {
  autoBoatAndAir: 'autoBoatAndAir',
  businessAndProfessional: 'businessAndProfessional',
  charityAndCauses: 'charityAndCauses',
  communityAndCulture: 'communityAndCulture',
  familyAndEducation: 'familyAndEducation',
  fashionAndBeauty: 'fashionAndBeauty',
  filmMediaAndEntertainment: 'filmMediaAndEntertainment',
  foodAndDrink: 'foodAndDrink',
  governmentAndPolitics: 'governmentAndPolitics',
  healthAndWellness: 'healthAndWellness',
  hobbiesAndSpecialInterest: 'hobbiesAndSpecialInterest',
  homeAndLifestyle: 'homeAndLifestyle',
  music: 'music',
  performingAndVisualArts: 'performingAndVisualArts',
  religionAndSpirituality: 'religionAndSpirituality',
  schoolActivities: 'schoolActivities',
  scienceAndTechnology: 'scienceAndTechnology',
  seasonalAndHoliday: 'seasonalAndHoliday',
  sportsAndFitness: 'sportsAndFitness',
  travelAndOutdoor: 'travelAndOutdoor',
  other: 'other',
} as const;

export type Subcategory = typeof Subcategory[keyof typeof Subcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Subcategory = {
  air: 'air',
  auto: 'auto',
  boat: 'boat',
  motorcycle: 'motorcycle',
  other: 'other',
  career: 'career',
  design: 'design',
  educators: 'educators',
  environmentAndSustainability: 'environmentAndSustainability',
  finance: 'finance',
  investment: 'investment',
  media: 'media',
  nonProfitNGO: 'nonProfitNGO',
  realEstate: 'realEstate',
  salesAndMarketing: 'salesAndMarketing',
  startupsAndBusiness: 'startupsAndBusiness',
  animalWelfare: 'animalWelfare',
  disasterRelief: 'disasterRelief',
  education: 'education',
  environment: 'environment',
  healthcare: 'healthcare',
  humanRights: 'humanRights',
  internationalAid: 'internationalAid',
  poverty: 'poverty',
  cityTown: 'cityTown',
  county: 'county',
  heritage: 'heritage',
  historic: 'historic',
  lgbt: 'lgbt',
  language: 'language',
  medieval: 'medieval',
  nationality: 'nationality',
  renaissance: 'renaissance',
  state: 'state',
  alumni: 'alumni',
  baby: 'baby',
  childrenAndYouth: 'childrenAndYouth',
  parenting: 'parenting',
  parentsAssociation: 'parentsAssociation',
  reunion: 'reunion',
  seniorCitizen: 'seniorCitizen',
  accessories: 'accessories',
  beauty: 'beauty',
  bridal: 'bridal',
  fashion: 'fashion',
  adult: 'adult',
  anime: 'anime',
  comedy: 'comedy',
  comics: 'comics',
  film: 'film',
  gaming: 'gaming',
  tv: 'tv',
  beer: 'beer',
  food: 'food',
  spirits: 'spirits',
  wine: 'wine',
  countyMunicipalGovernment: 'countyMunicipalGovernment',
  democraticParty: 'democraticParty',
  federalGovernment: 'federalGovernment',
  internationalAffairs: 'internationalAffairs',
  military: 'military',
  nationalSecurity: 'nationalSecurity',
  nonPartisan: 'nonPartisan',
  otherParty: 'otherParty',
  republicanParty: 'republicanParty',
  stateGovernment: 'stateGovernment',
  medical: 'medical',
  mentalHealth: 'mentalHealth',
  personalHealth: 'personalHealth',
  spa: 'spa',
  yoga: 'yoga',
  animeComics: 'animeComics',
  books: 'books',
  diy: 'diy',
  drawingAndPainting: 'drawingAndPainting',
  knitting: 'knitting',
  photography: 'photography',
  dating: 'dating',
  homeAndGarden: 'homeAndGarden',
  petsAndAnimals: 'petsAndAnimals',
  acoustic: 'acoustic',
  alternative: 'alternative',
  americana: 'americana',
  bluegrass: 'bluegrass',
  blues: 'blues',
  bluesAndJazz: 'bluesAndJazz',
  classical: 'classical',
  country: 'country',
  cultural: 'cultural',
  djDance: 'djDance',
  edm: 'edm',
  edmElectronic: 'edmElectronic',
  electronic: 'electronic',
  experimental: 'experimental',
  folk: 'folk',
  hipHopRap: 'hipHopRap',
  indie: 'indie',
  jazz: 'jazz',
  latin: 'latin',
  metal: 'metal',
  opera: 'opera',
  pop: 'pop',
  psychedelic: 'psychedelic',
  punkHardcore: 'punkHardcore',
  rAndB: 'rAndB',
  reggae: 'reggae',
  religiousSpiritual: 'religiousSpiritual',
  rock: 'rock',
  singerSongwriter: 'singerSongwriter',
  top40: 'top40',
  world: 'world',
  ballet: 'ballet',
  craft: 'craft',
  fineArt: 'fineArt',
  jewelry: 'jewelry',
  literaryArts: 'literaryArts',
  musical: 'musical',
  orchestra: 'orchestra',
  painting: 'painting',
  sculpture: 'sculpture',
  theatre: 'theatre',
  agnosticism: 'agnosticism',
  atheism: 'atheism',
  buddhism: 'buddhism',
  christianity: 'christianity',
  easternReligion: 'easternReligion',
  folkReligions: 'folkReligions',
  hinduism: 'hinduism',
  islam: 'islam',
  judaism: 'judaism',
  mormonism: 'mormonism',
  mysticismAndOccult: 'mysticismAndOccult',
  newAge: 'newAge',
  shintoism: 'shintoism',
  sikhism: 'sikhism',
  unaffiliated: 'unaffiliated',
  afterSchoolCare: 'afterSchoolCare',
  dinner: 'dinner',
  fundRaiser: 'fundRaiser',
  parking: 'parking',
  publicSpeaker: 'publicSpeaker',
  raffle: 'raffle',
  biotech: 'biotech',
  highTech: 'highTech',
  medicine: 'medicine',
  mobile: 'mobile',
  robotics: 'robotics',
  science: 'science',
  socialMedia: 'socialMedia',
  autumnEvents: 'autumnEvents',
  christmas: 'christmas',
  easter: 'easter',
  halloweenHaunt: 'halloweenHaunt',
  hanukkah: 'hanukkah',
  independenceDay: 'independenceDay',
  newYearsEve: 'newYearsEve',
  stPatricksDay: 'stPatricksDay',
  thanksgiving: 'thanksgiving',
  americanFootball: 'americanFootball',
  baseball: 'baseball',
  basketball: 'basketball',
  camps: 'camps',
  cheer: 'cheer',
  cycling: 'cycling',
  exercise: 'exercise',
  fightingMartialArts: 'fightingMartialArts',
  football: 'football',
  golf: 'golf',
  hockey: 'hockey',
  lacrosse: 'lacrosse',
  motorsports: 'motorsports',
  mountainBiking: 'mountainBiking',
  obstacles: 'obstacles',
  rugby: 'rugby',
  running: 'running',
  snowSports: 'snowSports',
  softball: 'softball',
  swimmingWaterSports: 'swimmingWaterSports',
  tennis: 'tennis',
  trackField: 'trackField',
  volleyball: 'volleyball',
  walking: 'walking',
  weightlifting: 'weightlifting',
  wrestling: 'wrestling',
  canoeing: 'canoeing',
  climbing: 'climbing',
  hiking: 'hiking',
  kayaking: 'kayaking',
  rafting: 'rafting',
  travel: 'travel',
} as const;

export type CategoryAutoBoatAndAirCategory = typeof CategoryAutoBoatAndAirCategory[keyof typeof CategoryAutoBoatAndAirCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryAutoBoatAndAirCategory = {
  autoBoatAndAir: 'autoBoatAndAir',
} as const;

export type CategoryAutoBoatAndAirSubcategory = typeof CategoryAutoBoatAndAirSubcategory[keyof typeof CategoryAutoBoatAndAirSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryAutoBoatAndAirSubcategory = {
  air: 'air',
  auto: 'auto',
  boat: 'boat',
  motorcycle: 'motorcycle',
  other: 'other',
} as const;

export interface CategoryAutoBoatAndAir {
  category?: CategoryAutoBoatAndAirCategory;
  subcategory?: CategoryAutoBoatAndAirSubcategory;
}

export type CategoryBusinessAndProfessionalCategory = typeof CategoryBusinessAndProfessionalCategory[keyof typeof CategoryBusinessAndProfessionalCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryBusinessAndProfessionalCategory = {
  businessAndProfessional: 'businessAndProfessional',
} as const;

export type CategoryBusinessAndProfessionalSubcategory = typeof CategoryBusinessAndProfessionalSubcategory[keyof typeof CategoryBusinessAndProfessionalSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryBusinessAndProfessionalSubcategory = {
  career: 'career',
  design: 'design',
  educators: 'educators',
  environmentAndSustainability: 'environmentAndSustainability',
  finance: 'finance',
  investment: 'investment',
  media: 'media',
  nonProfitNGO: 'nonProfitNGO',
  realEstate: 'realEstate',
  salesAndMarketing: 'salesAndMarketing',
  startupsAndBusiness: 'startupsAndBusiness',
  other: 'other',
} as const;

export interface CategoryBusinessAndProfessional {
  category?: CategoryBusinessAndProfessionalCategory;
  subcategory?: CategoryBusinessAndProfessionalSubcategory;
}

export type CategoryCharityAndCausesCategory = typeof CategoryCharityAndCausesCategory[keyof typeof CategoryCharityAndCausesCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryCharityAndCausesCategory = {
  charityAndCauses: 'charityAndCauses',
} as const;

export type CategoryCharityAndCausesSubcategory = typeof CategoryCharityAndCausesSubcategory[keyof typeof CategoryCharityAndCausesSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryCharityAndCausesSubcategory = {
  animalWelfare: 'animalWelfare',
  disasterRelief: 'disasterRelief',
  education: 'education',
  environment: 'environment',
  healthcare: 'healthcare',
  humanRights: 'humanRights',
  internationalAid: 'internationalAid',
  poverty: 'poverty',
  other: 'other',
} as const;

export interface CategoryCharityAndCauses {
  category?: CategoryCharityAndCausesCategory;
  subcategory?: CategoryCharityAndCausesSubcategory;
}

export type CategoryCommunityAndCultureCategory = typeof CategoryCommunityAndCultureCategory[keyof typeof CategoryCommunityAndCultureCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryCommunityAndCultureCategory = {
  communityAndCulture: 'communityAndCulture',
} as const;

export type CategoryCommunityAndCultureSubcategory = typeof CategoryCommunityAndCultureSubcategory[keyof typeof CategoryCommunityAndCultureSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryCommunityAndCultureSubcategory = {
  cityTown: 'cityTown',
  county: 'county',
  heritage: 'heritage',
  historic: 'historic',
  lgbt: 'lgbt',
  language: 'language',
  medieval: 'medieval',
  nationality: 'nationality',
  renaissance: 'renaissance',
  state: 'state',
  other: 'other',
} as const;

export interface CategoryCommunityAndCulture {
  category?: CategoryCommunityAndCultureCategory;
  subcategory?: CategoryCommunityAndCultureSubcategory;
}

export type CategoryFamilyAndEducationCategory = typeof CategoryFamilyAndEducationCategory[keyof typeof CategoryFamilyAndEducationCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFamilyAndEducationCategory = {
  familyAndEducation: 'familyAndEducation',
} as const;

export type CategoryFamilyAndEducationSubcategory = typeof CategoryFamilyAndEducationSubcategory[keyof typeof CategoryFamilyAndEducationSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFamilyAndEducationSubcategory = {
  alumni: 'alumni',
  baby: 'baby',
  childrenAndYouth: 'childrenAndYouth',
  education: 'education',
  parenting: 'parenting',
  parentsAssociation: 'parentsAssociation',
  reunion: 'reunion',
  seniorCitizen: 'seniorCitizen',
  other: 'other',
} as const;

export interface CategoryFamilyAndEducation {
  category?: CategoryFamilyAndEducationCategory;
  subcategory?: CategoryFamilyAndEducationSubcategory;
}

export type CategoryFashionAndBeautyCategory = typeof CategoryFashionAndBeautyCategory[keyof typeof CategoryFashionAndBeautyCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFashionAndBeautyCategory = {
  fashionAndBeauty: 'fashionAndBeauty',
} as const;

export type CategoryFashionAndBeautySubcategory = typeof CategoryFashionAndBeautySubcategory[keyof typeof CategoryFashionAndBeautySubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFashionAndBeautySubcategory = {
  accessories: 'accessories',
  beauty: 'beauty',
  bridal: 'bridal',
  fashion: 'fashion',
  other: 'other',
} as const;

export interface CategoryFashionAndBeauty {
  category?: CategoryFashionAndBeautyCategory;
  subcategory?: CategoryFashionAndBeautySubcategory;
}

export type CategoryFilmMediaAndEntertainmentCategory = typeof CategoryFilmMediaAndEntertainmentCategory[keyof typeof CategoryFilmMediaAndEntertainmentCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFilmMediaAndEntertainmentCategory = {
  filmMediaAndEntertainment: 'filmMediaAndEntertainment',
} as const;

export type CategoryFilmMediaAndEntertainmentSubcategory = typeof CategoryFilmMediaAndEntertainmentSubcategory[keyof typeof CategoryFilmMediaAndEntertainmentSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFilmMediaAndEntertainmentSubcategory = {
  adult: 'adult',
  anime: 'anime',
  comedy: 'comedy',
  comics: 'comics',
  film: 'film',
  gaming: 'gaming',
  tv: 'tv',
  other: 'other',
} as const;

export interface CategoryFilmMediaAndEntertainment {
  category?: CategoryFilmMediaAndEntertainmentCategory;
  subcategory?: CategoryFilmMediaAndEntertainmentSubcategory;
}

export type CategoryFoodAndDrinkCategory = typeof CategoryFoodAndDrinkCategory[keyof typeof CategoryFoodAndDrinkCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFoodAndDrinkCategory = {
  foodAndDrink: 'foodAndDrink',
} as const;

export type CategoryFoodAndDrinkSubcategory = typeof CategoryFoodAndDrinkSubcategory[keyof typeof CategoryFoodAndDrinkSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryFoodAndDrinkSubcategory = {
  beer: 'beer',
  food: 'food',
  spirits: 'spirits',
  wine: 'wine',
  other: 'other',
} as const;

export interface CategoryFoodAndDrink {
  category?: CategoryFoodAndDrinkCategory;
  subcategory?: CategoryFoodAndDrinkSubcategory;
}

export type CategoryGovernmentAndPoliticsCategory = typeof CategoryGovernmentAndPoliticsCategory[keyof typeof CategoryGovernmentAndPoliticsCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryGovernmentAndPoliticsCategory = {
  governmentAndPolitics: 'governmentAndPolitics',
} as const;

export type CategoryGovernmentAndPoliticsSubcategory = typeof CategoryGovernmentAndPoliticsSubcategory[keyof typeof CategoryGovernmentAndPoliticsSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryGovernmentAndPoliticsSubcategory = {
  countyMunicipalGovernment: 'countyMunicipalGovernment',
  democraticParty: 'democraticParty',
  federalGovernment: 'federalGovernment',
  internationalAffairs: 'internationalAffairs',
  military: 'military',
  nationalSecurity: 'nationalSecurity',
  nonPartisan: 'nonPartisan',
  otherParty: 'otherParty',
  republicanParty: 'republicanParty',
  stateGovernment: 'stateGovernment',
  other: 'other',
} as const;

export interface CategoryGovernmentAndPolitics {
  category?: CategoryGovernmentAndPoliticsCategory;
  subcategory?: CategoryGovernmentAndPoliticsSubcategory;
}

export type CategoryHealthAndWellnessCategory = typeof CategoryHealthAndWellnessCategory[keyof typeof CategoryHealthAndWellnessCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryHealthAndWellnessCategory = {
  healthAndWellness: 'healthAndWellness',
} as const;

export type CategoryHealthAndWellnessSubcategory = typeof CategoryHealthAndWellnessSubcategory[keyof typeof CategoryHealthAndWellnessSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryHealthAndWellnessSubcategory = {
  medical: 'medical',
  mentalHealth: 'mentalHealth',
  personalHealth: 'personalHealth',
  spa: 'spa',
  yoga: 'yoga',
  other: 'other',
} as const;

export interface CategoryHealthAndWellness {
  category?: CategoryHealthAndWellnessCategory;
  subcategory?: CategoryHealthAndWellnessSubcategory;
}

export type CategoryHobbiesAndSpecialInterestCategory = typeof CategoryHobbiesAndSpecialInterestCategory[keyof typeof CategoryHobbiesAndSpecialInterestCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryHobbiesAndSpecialInterestCategory = {
  hobbiesAndSpecialInterest: 'hobbiesAndSpecialInterest',
} as const;

export type CategoryHobbiesAndSpecialInterestSubcategory = typeof CategoryHobbiesAndSpecialInterestSubcategory[keyof typeof CategoryHobbiesAndSpecialInterestSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryHobbiesAndSpecialInterestSubcategory = {
  adult: 'adult',
  animeComics: 'animeComics',
  books: 'books',
  diy: 'diy',
  drawingAndPainting: 'drawingAndPainting',
  gaming: 'gaming',
  knitting: 'knitting',
  photography: 'photography',
  other: 'other',
} as const;

export interface CategoryHobbiesAndSpecialInterest {
  category?: CategoryHobbiesAndSpecialInterestCategory;
  subcategory?: CategoryHobbiesAndSpecialInterestSubcategory;
}

export type CategoryHomeAndLifestyleCategory = typeof CategoryHomeAndLifestyleCategory[keyof typeof CategoryHomeAndLifestyleCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryHomeAndLifestyleCategory = {
  homeAndLifestyle: 'homeAndLifestyle',
} as const;

export type CategoryHomeAndLifestyleSubcategory = typeof CategoryHomeAndLifestyleSubcategory[keyof typeof CategoryHomeAndLifestyleSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryHomeAndLifestyleSubcategory = {
  dating: 'dating',
  homeAndGarden: 'homeAndGarden',
  petsAndAnimals: 'petsAndAnimals',
  other: 'other',
} as const;

export interface CategoryHomeAndLifestyle {
  category?: CategoryHomeAndLifestyleCategory;
  subcategory?: CategoryHomeAndLifestyleSubcategory;
}

export type CategoryMusicCategory = typeof CategoryMusicCategory[keyof typeof CategoryMusicCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryMusicCategory = {
  music: 'music',
} as const;

export type CategoryMusicSubcategory = typeof CategoryMusicSubcategory[keyof typeof CategoryMusicSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryMusicSubcategory = {
  alternative: 'alternative',
  americana: 'americana',
  bluegrass: 'bluegrass',
  blues: 'blues',
  bluesAndJazz: 'bluesAndJazz',
  classical: 'classical',
  country: 'country',
  cultural: 'cultural',
  djDance: 'djDance',
  edm: 'edm',
  edmElectronic: 'edmElectronic',
  electronic: 'electronic',
  experimental: 'experimental',
  folk: 'folk',
  hipHopRap: 'hipHopRap',
  indie: 'indie',
  jazz: 'jazz',
  latin: 'latin',
  metal: 'metal',
  opera: 'opera',
  pop: 'pop',
  psychedelic: 'psychedelic',
  punkHardcore: 'punkHardcore',
  rAndB: 'rAndB',
  reggae: 'reggae',
  religiousSpiritual: 'religiousSpiritual',
  rock: 'rock',
  singerSongwriter: 'singerSongwriter',
  top40: 'top40',
  world: 'world',
  other: 'other',
} as const;

export interface CategoryMusic {
  category?: CategoryMusicCategory;
  subcategory?: CategoryMusicSubcategory;
}

export type CategoryPerformingAndVisualArtsCategory = typeof CategoryPerformingAndVisualArtsCategory[keyof typeof CategoryPerformingAndVisualArtsCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryPerformingAndVisualArtsCategory = {
  performingAndVisualArts: 'performingAndVisualArts',
} as const;

export type CategoryPerformingAndVisualArtsSubcategory = typeof CategoryPerformingAndVisualArtsSubcategory[keyof typeof CategoryPerformingAndVisualArtsSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryPerformingAndVisualArtsSubcategory = {
  ballet: 'ballet',
  comedy: 'comedy',
  craft: 'craft',
  dance: 'dance',
  design: 'design',
  fineArt: 'fineArt',
  jewelry: 'jewelry',
  literaryArts: 'literaryArts',
  musical: 'musical',
  opera: 'opera',
  orchestra: 'orchestra',
  painting: 'painting',
  sculpture: 'sculpture',
  theatre: 'theatre',
  other: 'other',
} as const;

export interface CategoryPerformingAndVisualArts {
  category?: CategoryPerformingAndVisualArtsCategory;
  subcategory?: CategoryPerformingAndVisualArtsSubcategory;
}

export type CategoryReligionAndSpiritualityCategory = typeof CategoryReligionAndSpiritualityCategory[keyof typeof CategoryReligionAndSpiritualityCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryReligionAndSpiritualityCategory = {
  religionAndSpirituality: 'religionAndSpirituality',
} as const;

export type CategoryReligionAndSpiritualitySubcategory = typeof CategoryReligionAndSpiritualitySubcategory[keyof typeof CategoryReligionAndSpiritualitySubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryReligionAndSpiritualitySubcategory = {
  agnosticism: 'agnosticism',
  atheism: 'atheism',
  buddhism: 'buddhism',
  christianity: 'christianity',
  easternReligion: 'easternReligion',
  folkReligions: 'folkReligions',
  hinduism: 'hinduism',
  islam: 'islam',
  judaism: 'judaism',
  mormonism: 'mormonism',
  mysticismAndOccult: 'mysticismAndOccult',
  newAge: 'newAge',
  shintoism: 'shintoism',
  sikhism: 'sikhism',
  unaffiliated: 'unaffiliated',
  other: 'other',
} as const;

export interface CategoryReligionAndSpirituality {
  category?: CategoryReligionAndSpiritualityCategory;
  subcategory?: CategoryReligionAndSpiritualitySubcategory;
}

export type CategorySchoolActivitiesCategory = typeof CategorySchoolActivitiesCategory[keyof typeof CategorySchoolActivitiesCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySchoolActivitiesCategory = {
  schoolActivities: 'schoolActivities',
} as const;

export type CategorySchoolActivitiesSubcategory = typeof CategorySchoolActivitiesSubcategory[keyof typeof CategorySchoolActivitiesSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySchoolActivitiesSubcategory = {
  afterSchoolCare: 'afterSchoolCare',
  dinner: 'dinner',
  fundRaiser: 'fundRaiser',
  parking: 'parking',
  publicSpeaker: 'publicSpeaker',
  raffle: 'raffle',
  other: 'other',
} as const;

export interface CategorySchoolActivities {
  category?: CategorySchoolActivitiesCategory;
  subcategory?: CategorySchoolActivitiesSubcategory;
}

export type CategoryScienceAndTechnologyCategory = typeof CategoryScienceAndTechnologyCategory[keyof typeof CategoryScienceAndTechnologyCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryScienceAndTechnologyCategory = {
  scienceAndTechnology: 'scienceAndTechnology',
} as const;

export type CategoryScienceAndTechnologySubcategory = typeof CategoryScienceAndTechnologySubcategory[keyof typeof CategoryScienceAndTechnologySubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryScienceAndTechnologySubcategory = {
  biotech: 'biotech',
  highTech: 'highTech',
  medicine: 'medicine',
  mobile: 'mobile',
  robotics: 'robotics',
  science: 'science',
  socialMedia: 'socialMedia',
  other: 'other',
} as const;

export interface CategoryScienceAndTechnology {
  category?: CategoryScienceAndTechnologyCategory;
  subcategory?: CategoryScienceAndTechnologySubcategory;
}

export type CategorySeasonalAndHolidayCategory = typeof CategorySeasonalAndHolidayCategory[keyof typeof CategorySeasonalAndHolidayCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySeasonalAndHolidayCategory = {
  seasonalAndHoliday: 'seasonalAndHoliday',
} as const;

export type CategorySeasonalAndHolidaySubcategory = typeof CategorySeasonalAndHolidaySubcategory[keyof typeof CategorySeasonalAndHolidaySubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySeasonalAndHolidaySubcategory = {
  autumnEvents: 'autumnEvents',
  christmas: 'christmas',
  easter: 'easter',
  halloweenHaunt: 'halloweenHaunt',
  hanukkah: 'hanukkah',
  independenceDay: 'independenceDay',
  newYearsEve: 'newYearsEve',
  stPatricksDay: 'stPatricksDay',
  thanksgiving: 'thanksgiving',
  other: 'other',
} as const;

export interface CategorySeasonalAndHoliday {
  category?: CategorySeasonalAndHolidayCategory;
  subcategory?: CategorySeasonalAndHolidaySubcategory;
}

export type CategorySportsAndFitnessCategory = typeof CategorySportsAndFitnessCategory[keyof typeof CategorySportsAndFitnessCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySportsAndFitnessCategory = {
  sportsAndFitness: 'sportsAndFitness',
} as const;

export type CategorySportsAndFitnessSubcategory = typeof CategorySportsAndFitnessSubcategory[keyof typeof CategorySportsAndFitnessSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategorySportsAndFitnessSubcategory = {
  americanFootball: 'americanFootball',
  baseball: 'baseball',
  basketball: 'basketball',
  camps: 'camps',
  cheer: 'cheer',
  cycling: 'cycling',
  exercise: 'exercise',
  fightingMartialArts: 'fightingMartialArts',
  football: 'football',
  golf: 'golf',
  hockey: 'hockey',
  lacrosse: 'lacrosse',
  motorsports: 'motorsports',
  mountainBiking: 'mountainBiking',
  obstacles: 'obstacles',
  rugby: 'rugby',
  running: 'running',
  snowSports: 'snowSports',
  softball: 'softball',
  swimmingWaterSports: 'swimmingWaterSports',
  tennis: 'tennis',
  trackField: 'trackField',
  volleyball: 'volleyball',
  walking: 'walking',
  weightlifting: 'weightlifting',
  wrestling: 'wrestling',
  yoga: 'yoga',
  other: 'other',
} as const;

export interface CategorySportsAndFitness {
  category?: CategorySportsAndFitnessCategory;
  subcategory?: CategorySportsAndFitnessSubcategory;
}

export type CategoryTravelAndOutdoorCategory = typeof CategoryTravelAndOutdoorCategory[keyof typeof CategoryTravelAndOutdoorCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryTravelAndOutdoorCategory = {
  travelAndOutdoor: 'travelAndOutdoor',
} as const;

export type CategoryTravelAndOutdoorSubcategory = typeof CategoryTravelAndOutdoorSubcategory[keyof typeof CategoryTravelAndOutdoorSubcategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryTravelAndOutdoorSubcategory = {
  canoeing: 'canoeing',
  climbing: 'climbing',
  hiking: 'hiking',
  kayaking: 'kayaking',
  rafting: 'rafting',
  travel: 'travel',
  other: 'other',
} as const;

export interface CategoryTravelAndOutdoor {
  category?: CategoryTravelAndOutdoorCategory;
  subcategory?: CategoryTravelAndOutdoorSubcategory;
}

export type CategoryOtherCategory = typeof CategoryOtherCategory[keyof typeof CategoryOtherCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryOtherCategory = {
  other: 'other',
} as const;

export interface CategoryOther {
  category?: CategoryOtherCategory;
}

export type EventClassification = (CategoryAutoBoatAndAir & {
  type?: Type;
}) | (CategoryBusinessAndProfessional & {
  type?: Type;
}) | (CategoryCharityAndCauses & {
  type?: Type;
}) | (CategoryCommunityAndCulture & {
  type?: Type;
}) | (CategoryFamilyAndEducation & {
  type?: Type;
}) | (CategoryFashionAndBeauty & {
  type?: Type;
}) | (CategoryFilmMediaAndEntertainment & {
  type?: Type;
}) | (CategoryFoodAndDrink & {
  type?: Type;
}) | (CategoryGovernmentAndPolitics & {
  type?: Type;
}) | (CategoryHealthAndWellness & {
  type?: Type;
}) | (CategoryHobbiesAndSpecialInterest & {
  type?: Type;
}) | (CategoryHomeAndLifestyle & {
  type?: Type;
}) | (CategoryMusic & {
  type?: Type;
}) | (CategoryPerformingAndVisualArts & {
  type?: Type;
}) | (CategoryReligionAndSpirituality & {
  type?: Type;
}) | (CategorySchoolActivities & {
  type?: Type;
}) | (CategoryScienceAndTechnology & {
  type?: Type;
}) | (CategorySeasonalAndHoliday & {
  type?: Type;
}) | (CategorySportsAndFitness & {
  type?: Type;
}) | (CategoryTravelAndOutdoor & {
  type?: Type;
}) | (CategoryOther & {
  type?: Type;
});

export interface Accessibility {
  contactName?: string;
  contactNumber?: string;
  travelInstructions?: string;
  entryInstructions?: string;
  afterEntryInstructions?: string;
  hazards?: string;
  toiletLocation?: string;
  disabledParking?: string;
  features?: AccessibilityFeature;
}

export interface Artist {
  /** External system from which the artist information originates. */
  origin: string;
  /** Name of the artist. */
  name: string;
  /** Identifier used to reference the artist in the external system. */
  externalId?: string;
}

export interface AccessibilityFeature {
  access?: boolean;
  wheelchairAccessibility?: boolean;
  audioDescription?: boolean;
  telephoneTypewriter?: boolean;
  volumeControlTelephone?: boolean;
  assistiveListeningSystems?: boolean;
  signLanguageInterpretation?: boolean;
  accessiblePrint?: boolean;
  closedCaptioning?: boolean;
  openedCaptioning?: boolean;
  brailleSymbol?: boolean;
}

export interface SeatingLocationId {
  id?: string;
}

export interface CheckIn {
  checkedIn: boolean;
  date?: Date;
  userId?: UserId;
}

export interface TicketSwap {
  id: string;
  swappedAt: Date;
  userId: UserId;
}

export interface OrderTotals {
  subtotal: number;
  amexFee?: number;
  zipFee?: number;
  humanitixFee?: number;
  bookingFee?: number;
  passedOnFee?: number;
  clientDonation: number;
  netClientDonation: number;
  donation: number;
  dgrDonation?: number;
  giftCardCredit?: number;
  credit?: number;
  /** @deprecated */
  outstandingAmount?: number;
  feesIncluded: boolean;
  bookingTaxes: number;
  passedOnTaxes?: number;
  taxes: number;
  totalTaxes: number;
  discounts: number;
  refunds: number;
  netSales: number;
  grossSales: number;
  referralAmount?: number;
  total: number;
}

export type TicketTypePriceRange = {
  enabled?: boolean;
  min?: number;
  max?: number;
};

export type TicketTypePriceOptionsOptionsItem = {
  value?: string;
};

export type TicketTypePriceOptions = {
  enabled?: boolean;
  options?: TicketTypePriceOptionsOptionsItem[];
};

export interface TicketType {
  _id?: TicketTypeId;
  name: string;
  price?: number;
  priceRange?: TicketTypePriceRange;
  priceOptions?: TicketTypePriceOptions;
  quantity?: number;
  description?: string;
  disabled?: boolean;
  deleted?: boolean;
  isDonation?: boolean;
}

export interface Pricing {
  /** Minimum ticket price on an event. If the event has free tickets, this will be 0. */
  minimumPrice: number;
  /** Maximum ticket price on an event. If the event only has free tickets, this will be 0. */
  maximumPrice: number;
}

export type EventLocationType = typeof EventLocationType[keyof typeof EventLocationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventLocationType = {
  address: 'address',
  online: 'online',
  custom: 'custom',
  toBeAnnounced: 'toBeAnnounced',
} as const;

export interface EventLocation {
  type: EventLocationType;
  venueName?: string;
  address?: string;
  latLng?: number[];
  instructions?: string;
  placeId?: string;
  onlineUrl?: string;
  mapUrl?: string;
  /** The 'locality' from the Google geocoding api */
  city?: string;
  /** The 'administrative_area_level_1' from the Google geocoding api */
  region?: string;
  /** The 'country' from the Google geocoding api. Format is that of ISO 3166-1 alpha-2 country codes. */
  country?: string;
}

export type PaymentOptionsRefundSettings = {
  refundPolicy?: string;
  customRefundPolicy?: string;
};

export interface PaymentOptions {
  refundSettings?: PaymentOptionsRefundSettings;
}

export interface Image {
  url: string;
}

export interface DateRange {
  _id?: DateRangeId;
  startDate: Date;
  endDate: Date;
  scheduleId?: string;
  disabled?: boolean;
  deleted?: boolean;
}

export type FirstName = string;

export type LastName = string;

export type Email = string;

export type Mobile = string;

/**
 * The access code used on the order to reveal hidden tickets. If returned on the ticket object, this ticket was revealed by that access code.
 */
export type AccessCode = string;

/**
 * The automatic discount applied to an order or ticket.
 */
export type DiscountsAutoDiscount = {
  discountAmount?: DiscountAmount;
};

/**
 * The object for the discount code applied onto an order or ticket to apply a discount.
 */
export type DiscountsDiscountCode = {
  code?: DiscountCode;
  discountAmount?: DiscountAmount;
};

export interface Discounts {
  /** The automatic discount applied to an order or ticket. */
  autoDiscount?: DiscountsAutoDiscount;
  /** The object for the discount code applied onto an order or ticket to apply a discount. */
  discountCode?: DiscountsDiscountCode;
}

/**
 * The discount code applied onto an order or ticket to apply a discount.
 */
export type DiscountCode = string;

/**
 * The discount amount applied to an order or ticket
 */
export type DiscountAmount = number;

export type Currency = typeof Currency[keyof typeof Currency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Currency = {
  AUD: 'AUD',
  NZD: 'NZD',
  USD: 'USD',
  FJD: 'FJD',
  CAD: 'CAD',
} as const;

/**
 * The channel through which the order or ticket was created, via an online sale or manual order.
 */
export type SalesChannel = typeof SalesChannel[keyof typeof SalesChannel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SalesChannel = {
  online: 'online',
  manual: 'manual',
} as const;

export interface QrCodeData {
  _id: TicketId;
  eventId: EventId;
}

/**
 * The location of where the object is stored. Format is that of ISO 3166-1 alpha-2 country codes.
 */
export type Location = typeof Location[keyof typeof Location];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Location = {
  AU: 'AU',
  NZ: 'NZ',
  US: 'US',
  FJ: 'FJ',
  CA: 'CA',
  GB: 'GB',
  SG: 'SG',
  DE: 'DE',
  MY: 'MY',
  MX: 'MX',
} as const;

export type Date = string;

export type Timezone = string;

export type CheckInOutResultScanningMessagesItem = {
  header: string;
  message: string;
};

export interface CheckInOutResult {
  scanningMessages: CheckInOutResultScanningMessagesItem[];
}

/**
 * The total number of items matching your query.
 */
export type PaginationTotal = number;

/**
 * Page number you wish to fetch.
 * @minimum 1
 */
export type PaginationPage = number;

/**
 * Page size of the results you wish to fetch.
 * @minimum 1
 * @maximum 100
 */
export type PaginationPageSize = number;

export interface PaginatedResponse {
  total: PaginationTotal;
  page: PaginationPage;
  pageSize: PaginationPageSize;
}

/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
export type OverrideLocationParameter = string;

/**
 * ID of the event on a specific date.
 */
export type EventDateIdParameter = string;

/**
 * ID of the event on a specific date.
 */
export type EventDateIdRequiredParameter = string;

/**
 * Page number you wish to fetch.
 */
export type PageParameter = number;

/**
 * Page size of the results you wish to fetch.
 */
export type PageSizeParameter = number;

/**
 * If true, return only events that have an endDate in the future.
 */
export type InFutureOnlyParameter = boolean;

/**
 * If true, return only events that have artists.
 */
export type WithArtistsOnlyParameter = boolean;

/**
 * Results since this date-time (ISO 8601).
 */
export type SinceParameter = string;

export type TypeParameter = typeof TypeParameter[keyof typeof TypeParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TypeParameter = {
  appearanceOrSigning: 'appearanceOrSigning',
  attraction: 'attraction',
  campTripOrRetreat: 'campTripOrRetreat',
  classTrainingOrWorkshop: 'classTrainingOrWorkshop',
  concertOrPerformance: 'concertOrPerformance',
  conference: 'conference',
  convention: 'convention',
  dinnerOrGala: 'dinnerOrGala',
  festivalOrFair: 'festivalOrFair',
  gameOrCompetition: 'gameOrCompetition',
  meetingOrNetworkingEvent: 'meetingOrNetworkingEvent',
  partyOrSocialGathering: 'partyOrSocialGathering',
  raceOrEnduranceEvent: 'raceOrEnduranceEvent',
  rally: 'rally',
  screening: 'screening',
  seminarOrTalk: 'seminarOrTalk',
  tour: 'tour',
  tournament: 'tournament',
  tradeShowConsumerShowOrExpo: 'tradeShowConsumerShowOrExpo',
  other: 'other',
} as const;

export type CategoryParameter = typeof CategoryParameter[keyof typeof CategoryParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CategoryParameter = {
  autoBoatAndAir: 'autoBoatAndAir',
  businessAndProfessional: 'businessAndProfessional',
  charityAndCauses: 'charityAndCauses',
  communityAndCulture: 'communityAndCulture',
  familyAndEducation: 'familyAndEducation',
  fashionAndBeauty: 'fashionAndBeauty',
  filmMediaAndEntertainment: 'filmMediaAndEntertainment',
  foodAndDrink: 'foodAndDrink',
  governmentAndPolitics: 'governmentAndPolitics',
  healthAndWellness: 'healthAndWellness',
  hobbiesAndSpecialInterest: 'hobbiesAndSpecialInterest',
  homeAndLifestyle: 'homeAndLifestyle',
  music: 'music',
  performingAndVisualArts: 'performingAndVisualArts',
  religionAndSpirituality: 'religionAndSpirituality',
  schoolActivities: 'schoolActivities',
  scienceAndTechnology: 'scienceAndTechnology',
  seasonalAndHoliday: 'seasonalAndHoliday',
  sportsAndFitness: 'sportsAndFitness',
  travelAndOutdoor: 'travelAndOutdoor',
  other: 'other',
} as const;

export type SubcategoryParameter = typeof SubcategoryParameter[keyof typeof SubcategoryParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubcategoryParameter = {
  air: 'air',
  auto: 'auto',
  boat: 'boat',
  motorcycle: 'motorcycle',
  other: 'other',
  career: 'career',
  design: 'design',
  educators: 'educators',
  environmentAndSustainability: 'environmentAndSustainability',
  finance: 'finance',
  investment: 'investment',
  media: 'media',
  nonProfitNGO: 'nonProfitNGO',
  realEstate: 'realEstate',
  salesAndMarketing: 'salesAndMarketing',
  startupsAndBusiness: 'startupsAndBusiness',
  animalWelfare: 'animalWelfare',
  disasterRelief: 'disasterRelief',
  education: 'education',
  environment: 'environment',
  healthcare: 'healthcare',
  humanRights: 'humanRights',
  internationalAid: 'internationalAid',
  poverty: 'poverty',
  cityTown: 'cityTown',
  county: 'county',
  heritage: 'heritage',
  historic: 'historic',
  lgbt: 'lgbt',
  language: 'language',
  medieval: 'medieval',
  nationality: 'nationality',
  renaissance: 'renaissance',
  state: 'state',
  alumni: 'alumni',
  baby: 'baby',
  childrenAndYouth: 'childrenAndYouth',
  parenting: 'parenting',
  parentsAssociation: 'parentsAssociation',
  reunion: 'reunion',
  seniorCitizen: 'seniorCitizen',
  accessories: 'accessories',
  beauty: 'beauty',
  bridal: 'bridal',
  fashion: 'fashion',
  adult: 'adult',
  anime: 'anime',
  comedy: 'comedy',
  comics: 'comics',
  film: 'film',
  gaming: 'gaming',
  tv: 'tv',
  beer: 'beer',
  food: 'food',
  spirits: 'spirits',
  wine: 'wine',
  countyMunicipalGovernment: 'countyMunicipalGovernment',
  democraticParty: 'democraticParty',
  federalGovernment: 'federalGovernment',
  internationalAffairs: 'internationalAffairs',
  military: 'military',
  nationalSecurity: 'nationalSecurity',
  nonPartisan: 'nonPartisan',
  otherParty: 'otherParty',
  republicanParty: 'republicanParty',
  stateGovernment: 'stateGovernment',
  medical: 'medical',
  mentalHealth: 'mentalHealth',
  personalHealth: 'personalHealth',
  spa: 'spa',
  yoga: 'yoga',
  animeComics: 'animeComics',
  books: 'books',
  diy: 'diy',
  drawingAndPainting: 'drawingAndPainting',
  knitting: 'knitting',
  photography: 'photography',
  dating: 'dating',
  homeAndGarden: 'homeAndGarden',
  petsAndAnimals: 'petsAndAnimals',
  acoustic: 'acoustic',
  alternative: 'alternative',
  americana: 'americana',
  bluegrass: 'bluegrass',
  blues: 'blues',
  bluesAndJazz: 'bluesAndJazz',
  classical: 'classical',
  country: 'country',
  cultural: 'cultural',
  djDance: 'djDance',
  edm: 'edm',
  edmElectronic: 'edmElectronic',
  electronic: 'electronic',
  experimental: 'experimental',
  folk: 'folk',
  hipHopRap: 'hipHopRap',
  indie: 'indie',
  jazz: 'jazz',
  latin: 'latin',
  metal: 'metal',
  opera: 'opera',
  pop: 'pop',
  psychedelic: 'psychedelic',
  punkHardcore: 'punkHardcore',
  rAndB: 'rAndB',
  reggae: 'reggae',
  religiousSpiritual: 'religiousSpiritual',
  rock: 'rock',
  singerSongwriter: 'singerSongwriter',
  top40: 'top40',
  world: 'world',
  ballet: 'ballet',
  craft: 'craft',
  fineArt: 'fineArt',
  jewelry: 'jewelry',
  literaryArts: 'literaryArts',
  musical: 'musical',
  orchestra: 'orchestra',
  painting: 'painting',
  sculpture: 'sculpture',
  theatre: 'theatre',
  agnosticism: 'agnosticism',
  atheism: 'atheism',
  buddhism: 'buddhism',
  christianity: 'christianity',
  easternReligion: 'easternReligion',
  folkReligions: 'folkReligions',
  hinduism: 'hinduism',
  islam: 'islam',
  judaism: 'judaism',
  mormonism: 'mormonism',
  mysticismAndOccult: 'mysticismAndOccult',
  newAge: 'newAge',
  shintoism: 'shintoism',
  sikhism: 'sikhism',
  unaffiliated: 'unaffiliated',
  afterSchoolCare: 'afterSchoolCare',
  dinner: 'dinner',
  fundRaiser: 'fundRaiser',
  parking: 'parking',
  publicSpeaker: 'publicSpeaker',
  raffle: 'raffle',
  biotech: 'biotech',
  highTech: 'highTech',
  medicine: 'medicine',
  mobile: 'mobile',
  robotics: 'robotics',
  science: 'science',
  socialMedia: 'socialMedia',
  autumnEvents: 'autumnEvents',
  christmas: 'christmas',
  easter: 'easter',
  halloweenHaunt: 'halloweenHaunt',
  hanukkah: 'hanukkah',
  independenceDay: 'independenceDay',
  newYearsEve: 'newYearsEve',
  stPatricksDay: 'stPatricksDay',
  thanksgiving: 'thanksgiving',
  americanFootball: 'americanFootball',
  baseball: 'baseball',
  basketball: 'basketball',
  camps: 'camps',
  cheer: 'cheer',
  cycling: 'cycling',
  exercise: 'exercise',
  fightingMartialArts: 'fightingMartialArts',
  football: 'football',
  golf: 'golf',
  hockey: 'hockey',
  lacrosse: 'lacrosse',
  motorsports: 'motorsports',
  mountainBiking: 'mountainBiking',
  obstacles: 'obstacles',
  rugby: 'rugby',
  running: 'running',
  snowSports: 'snowSports',
  softball: 'softball',
  swimmingWaterSports: 'swimmingWaterSports',
  tennis: 'tennis',
  trackField: 'trackField',
  volleyball: 'volleyball',
  walking: 'walking',
  weightlifting: 'weightlifting',
  wrestling: 'wrestling',
  canoeing: 'canoeing',
  climbing: 'climbing',
  hiking: 'hiking',
  kayaking: 'kayaking',
  rafting: 'rafting',
  travel: 'travel',
} as const;

export type StatusParameter = typeof StatusParameter[keyof typeof StatusParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusParameter = {
  complete: 'complete',
  cancelled: 'cancelled',
} as const;

/**
 * The API key of the user who has permission to perform the requested action.
 */
export type AccessApiKeyParameter = string;

export type GetV1EventsParams = {
/**
 * Page number you wish to fetch.
 */
page: PageParameter;
/**
 * Page size of the results you wish to fetch.
 */
pageSize?: PageSizeParameter;
/**
 * If true, return only events that have an endDate in the future.
 */
inFutureOnly?: InFutureOnlyParameter;
/**
 * Results since this date-time (ISO 8601).
 */
since?: SinceParameter;
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type GetV1Events200AllOf = {
  events: Event[];
};

export type GetV1Events200 = PaginatedResponse & GetV1Events200AllOf;

export type PostV1EventsParams = {
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type GetV1EventsEventIdParams = {
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type PatchV1EventsEventIdParams = {
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type GetV1EventsEventIdCheckInCountParams = {
/**
 * ID of the event on a specific date.
 */
eventDateId: EventDateIdRequiredParameter;
};

export type GetV1EventsEventIdOrdersParams = {
/**
 * ID of the event on a specific date.
 */
eventDateId?: EventDateIdParameter;
/**
 * Page number you wish to fetch.
 */
page: PageParameter;
/**
 * Page size of the results you wish to fetch.
 */
pageSize?: PageSizeParameter;
/**
 * Results since this date-time (ISO 8601).
 */
since?: SinceParameter;
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type GetV1EventsEventIdOrders200AllOf = {
  orders: Order[];
};

export type GetV1EventsEventIdOrders200 = PaginatedResponse & GetV1EventsEventIdOrders200AllOf;

export type GetV1EventsEventIdOrdersOrderIdParams = {
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type GetV1EventsEventIdTicketsParams = {
/**
 * ID of the event on a specific date.
 */
eventDateId?: EventDateIdParameter;
/**
 * Page number you wish to fetch.
 */
page: PageParameter;
/**
 * Page size of the results you wish to fetch.
 */
pageSize?: PageSizeParameter;
/**
 * Ticket status you wish to fetch.
 */
status?: StatusParameter;
/**
 * Results since this date-time (ISO 8601).
 */
since?: SinceParameter;
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type GetV1EventsEventIdTickets200AllOf = {
  tickets: Ticket[];
};

export type GetV1EventsEventIdTickets200 = PaginatedResponse & GetV1EventsEventIdTickets200AllOf;

export type GetV1EventsEventIdTicketsTicketIdParams = {
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type PostV1EventsEventIdTicketsTicketIdCheckInParams = {
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type PostV1EventsEventIdTicketsTicketIdCheckOutParams = {
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
};

export type GetV1TagsParams = {
/**
 * Page number you wish to fetch.
 */
page: PageParameter;
/**
 * Page size of the results you wish to fetch.
 */
pageSize?: PageSizeParameter;
};

export type GetV1Tags200AllOf = {
  tags: Tag[];
};

export type GetV1Tags200 = PaginatedResponse & GetV1Tags200AllOf;

export type GetV1GlobalEventsParams = {
/**
 * Page number you wish to fetch.
 */
page: PageParameter;
/**
 * Page size of the results you wish to fetch.
 */
pageSize?: PageSizeParameter;
/**
 * Filter events where "event.classification.type" matches this field.
 */
type?: TypeParameter;
/**
 * Filter events where "event.classification.category" matches this field.
 */
category?: CategoryParameter;
/**
 * Filter events where "event.classification.subcategory" matches this field. If this parameter is provided, then "#/components/parameters/Category" must also be provided.
 */
subcategory?: SubcategoryParameter;
/**
 * By default, queries will be made with the user location. Use this parameter to override the user location for these requests. Format is that of ISO 3166-1 alpha-2 country codes.
 */
overrideLocation?: OverrideLocationParameter;
/**
 * If true, return only events that have artists.
 */
withArtistsOnly?: WithArtistsOnlyParameter;
};

export type GetV1GlobalEvents200AllOf = {
  events: Event[];
};

export type GetV1GlobalEvents200 = PaginatedResponse & GetV1GlobalEvents200AllOf;

